---
title: "What distribution best describes emperical fish species size distributions?"
author: "Freddie Heather, Shane Richards, Asta Audzijonyte"
---

```{r setup, include = FALSE}

knitr::opts_chunk$set(
  comment = FALSE, 
  warning = FALSE, 
  error   = FALSE, 
  message = FALSE
)

rerun_models  <- FALSE # will take a while
rerun_figures <- FALSE
```

# Setup

```{r packages}

library(dplyr)
library(ggplot2)
library(arrow)
library(rstan)
library(tidyr)
library(tidybayes, include.only = c("spread_draws"))
library(cowplot)
library(stringr)
library(rlang)
library(posterior)

```

## Data import

```{r data-import}

data_obs   <- read_parquet("data/data_obs_cleaned.parquet")
data_survs <- read_parquet("data/survey_list_m1_aus.parquet")

rls_bin_breaks <- 
  data_obs %>% 
  pull(size_class) %>% 
  unique() %>% 
  sort()

rls_bin_table <-
  tibble(size_class = c(0, rls_bin_breaks, 500)) %>% 
  mutate(
    size_indx  = 0:(length(size_class)-1),
    size_min = (size_class + lag(size_class))/2,
    size_max = lead(size_min)
  ) %>% 
    filter(size_class %in% c(rls_bin_breaks, 500))

species_list <- data_obs %>% pull(species_name) %>% unique()

species_indx_table <- 
  tibble(
    species_name = species_list, 
    species_indx = 1:length(species_list))

if(!file.exists("data/data_obs_cleaned_sample.parquet")){
  # random 20 species
  set.seed(1)
  random_species <- 
    tibble(
      species_name = sample(unique(data_obs$species_name), 20), 
      species_indx = 1:20)
  
  data_obs %>% 
    filter(species_name %in% random_species$species_name) %>% 
    left_join(random_species, by = join_by(species_name)) %>% 
    write_parquet("data/data_obs_cleaned_sample.parquet")
  
}

data_obs_sample <- read_parquet("data/data_obs_cleaned_sample.parquet")

```

## Data simulation

```{r data-simulation}

# set number of simulated species
sim_n_spp <- 20
sim_n_reps <- 1000
set.seed(1)

rls_bin <- function(size) {
  rls_bin_table$size_class[.bincode(size, breaks = c(0, rls_bin_table$size_max))]
}

is_odd <- function(x) ((x/2) %% 1) == 0.5

data_out <- tibble()

for(i in 1:sim_n_spp){
  
  # is odd number?
  if(is_odd(i)) {
     xx <- 
      tibble(num = 1:sim_n_reps) %>% 
      mutate(mean = rlnorm(1, 2.45, 0.78), 
             sd =  0.09687 + mean*0.33557) %>% 
      mutate(size_class_raw = rnorm(n = sim_n_reps, 
                                    mean = mean, 
                                    sd = sd)) %>% 
      mutate(species_indx = i) %>% 
      mutate(species_name = paste0("spp_", species_indx)) %>% 
      filter(size_class_raw > 1.25) %>% 
      mutate(size_class = rls_bin(size_class_raw)) %>% 
        select(-num)
  } else {
        xx <- 
       tibble(num = 1:sim_n_reps) %>% 
      mutate(mean = rlnorm(1, 1.5, 0.1), 
             sd =  rlnorm(1, 0.5, 0.1)) %>% 
      mutate(size_class_raw = rlnorm(n = sim_n_reps, 
                                     meanlog = log(mean), 
                                     sdlog = log(sd))) %>% 
      mutate(species_indx = i) %>% 
      mutate(species_name = paste0("spp_", species_indx)) %>% 
      filter(size_class_raw > 1.25) %>% 
      mutate(size_class = rls_bin(size_class_raw)) %>% 
        select(-num)
  }

  data_out <- bind_rows(data_out, xx)
}

data_sim <- 
  data_out %>% 
  left_join(rls_bin_table %>% select(size_class, size_indx),
            by = join_by(size_class)) 

```

## Data visualisation

### Real data

```{r datavis-realdata}


if(!file.exists("output/data_figs/ssd_obs_20spp.png") | rerun_figures){
  
  p <-
    data_obs_sample %>% 
    count(species_name, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_name, scales = "free") +
    labs(x = "Fish length (cm)",  
         y = "Fish abundance") +
    theme_bw() 
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_obs_20spp.png", 
            base_height = 10)
  
}

if(!file.exists("output/data_figs/ssd_obs_20spp_log.png") | rerun_figures){
  
  p <- 
    data_obs_sample %>% 
    count(species_name, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_name, scales = "free") +
    scale_y_log10() +
    scale_x_log10() +
    labs(x = "Log Fish length (cm)",  
         y = "Log Fish abundance") +
    theme_bw()
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_obs_20spp_log.png", 
            base_height = 10)
  
}

```

### Simulated data

```{r datavis-simulateddata}

if(!file.exists("output/data_figs/ssd_sim_20spp.png") | rerun_figures){
  
  p <-
    data_sim %>% 
  count(species_indx, size_class) %>% 
  ggplot() +
	geom_point(mapping = aes(x = size_class, y = n)) +
	geom_line(mapping = aes(x = size_class, y = n)) +
	facet_wrap( ~ species_indx, scales = "free") +
	labs(x = "Fish length (cm)",  
	     y = "Fish abundance") +
	theme_bw() 
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_sim_20spp.png", 
            base_height = 10)
  
}

if(!file.exists("output/data_figs/ssd_sim_20spp_log.png") | rerun_figures){
  
  p <- 
    data_sim %>% 
  count(species_indx, size_class) %>% 
  ggplot() +
	geom_point(mapping = aes(x = size_class, y = n)) +
	geom_line(mapping = aes(x = size_class, y = n)) +
	facet_wrap( ~ species_indx, scales = "free") +
  scale_y_log10() +
  scale_x_log10() +
	labs(x = "Log Fish length (cm)",  
	     y = "Log Fish abundance") +
	theme_bw()
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_sim_20spp_log.png", 
            base_height = 10)
  
}


```

# Bayesian modelling

## Outline of models

I want to create the following models:

| Model Name | Stan     | Data | nspp   | Data type | Distribution | Overdispersion? | Bin correction? | par1 (location) | par2 (variance)     |
|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|
| model_01   | model_01 | sim  | 20     | cont      | norm         | No              | No              | per species     | per species         |
| model_02   | model_02 | sim  | 20     | cont      | lnorm        | No              | No              | per species     | per species         |
| model_03   | model_03 | sim  | 20     | bin       | norm         | No              | No              | per species     | per species         |
| model_04   | model_04 | sim  | 20     | bin       | lnorm        | No              | No              | per species     | per species         |
| model_05   | model_03 | real | 20/774 | bin       | norm         | No              | No              | per species     | per species         |
| model_06   | model_04 | real | 20/774 | bin       | lnorm        | No              | No              | per species     | per species         |
| model_07   | model_07 | real | 20/774 | bin       | norm         | No              | No              | per species     | predicted from par1 |
| model_08   | model_08 | real | 20/774 | bin       | lnorm        | No              | No              | per species     | predicted from par1 |
| model_09   |          | real |        | bin       | norm         | No              | Yes             | per species     | per species         |
| model_10   |          | real |        | bin       | lnorm        | No              | Yes             | per species     | per species         |
| model_11   |          | real |        | bin       | norm         | No              | Yes             | per species     | predicted from par1 |
| model_12   |          | real |        | bin       | lnorm        | No              | Yes             | per species     | predicted from par1 |
| model_13   |          | real |        | bin       | norm & lnorm | No              | Yes             | per species     | per species         |
| model_14   |          | real |        | bin       | norm & lnorm | No              | Yes             | per species     | predicted from par1 |

## Functions

```{r modelling-functions}

# extract parameters from a stan model in a tidy way
extract_pars <- function(stan_model#, 
                         # pars, 
                         # per_spp = TRUE
                         ){
  
  stan_model %>% 
  summarise_draws() %>% 
  mutate(species_indx = str_extract(variable, "(?<=\\[)\\d*(?=\\])") %>% as.numeric()) %>% 
  mutate(parameter = str_remove(variable, "\\[\\d*\\]")) %>% 
  filter(!str_detect(parameter, "ln_")) %>% # transformed from generated quantities
  filter(parameter != "lp__") %>% 
  select(species_indx, 
         parameter, 
         median,
         q5, 
         q95) %>% 
    drop_na(species_indx) %>% 
  pivot_wider(values_from = median:q95,
              names_from = parameter) %>% 
    pivot_longer(cols = contains(c("median_", "q5_", "q95_")), 
                 names_to = c("quantile", "parameter"),
                 names_pattern = "(.*?)_(.*)") %>% # non-greedy
    pivot_wider(values_from = value, 
                names_from = parameter)
  # 
  # if(per_spp){
  #   var_sym <- 
  #     paste0("c(", paste(pars, collapse = ", "), ")[species_indx]") %>% 
  #     rlang::parse_expr()
  # } else {
  #   var_sym <- 
  #     paste0("c(", paste(pars, collapse = ", "), ")")%>% 
  #     rlang::parse_expr()
  # }
  # 
  # stan_model %>% 
  #   spread_draws(!!var_sym) %>% 
  #   ungroup() %>% 
  #   pivot_longer(cols = all_of(pars), 
  #                names_to = "par") %>% 
  #   mutate(value = case_when(str_detect(par, "ln_") ~ exp(value),
  #                            TRUE ~ value), 
  #          par = case_when(str_detect(par, "ln_") ~ str_remove(par, "ln_"),
  #                            TRUE ~ par)) %>% 
  #   summarise(quantile_025 = quantile(value, 0.025), 
  #             quantile_5 = quantile(value, 0.500), 
  #             quantile_975 = quantile(value, 0.975), 
  #             .by = c(species_indx, par)) %>% 
  #   pivot_longer(cols = contains("quantile"), 
  #                names_prefix = "quantile_", 
  #                values_to = "value", 
  #                names_to = "quantile",
  #                names_transform = \(x) as.numeric(paste0("0.", x)))
}

# make the stan datalist for models 03 and 04
make_datalist <- function(count_data, spplevel_data){
  list(
    I = nrow(count_data),
    S = max(count_data$species_indx),
    B = max(count_data$size_indx),
    l = rls_bin_table$size_min[1:(max(count_data$size_indx)+1)],
    N_species = spplevel_data$totaln_spp,
    i_min     = spplevel_data$min_row,
    i_max     = spplevel_data$max_row,
    s = count_data$species_indx,
    b = count_data$size_indx,
    n = count_data$n
)
}



# plot a stan model fit to continuous body size (i.e. simulated data)
plot_model_continuous <- function(stan_model_pars, 
                       raw_data,  
                       dist = "norm", 
                       xvar = "size_class_raw"){
  
  raw_data %>% 
    full_join(stan_model_pars,
              by = join_by(species_indx),
              multiple = "all", 
              relationship = "many-to-many")  %>% 
    {if(dist == "norm") mutate(., 
                               fit = dnorm(!!sym(xvar), 
                                           mu, sigma)) else .} %>% 
    {if(dist == "lnorm") mutate(., 
                                fit = dlnorm(!!sym(xvar), 
                                             meanlog, sdlog)) else .} %>%
    select(species_indx, !!sym(xvar), quantile, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit) %>%
    ggplot() +
    aes(x = !!sym(xvar)) +
    geom_density() +
    geom_line(aes(y = median), 
              col = "red",
                alpha = 0.3) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = "red",
                alpha = 0.3) +
    facet_wrap(~species_indx, scales = "free") 
  
}

# plot a stan model fit to binned body size (e.g. RLS data)
plot_model_binned <- function(stan_model_pars, 
                       raw_data,  
                       dist = "norm", 
                       xvar = "size_class", 
                       facet_var = "species_indx"){
  
  raw_data %>% 
    full_join(stan_model_pars,
              by = join_by(species_indx),
              multiple = "all", 
              relationship = "many-to-many")  %>% 
    {if(dist == "norm") mutate(., 
                               fit = pnorm(size_max, mu,sigma) -  
                                 pnorm(size_min, mu, sigma)) else .} %>% 
    {if(dist == "lnorm") mutate(., 
                                fit = plnorm(size_max, meanlog, sdlog) -  
                                  plnorm(size_min, meanlog, sdlog)) else .} %>%
    select(!!sym(facet_var), !!sym(xvar), quantile, p, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit) %>%
   ggplot() +
    aes(x = !!sym(xvar), 
        y = p) +
    geom_point() +
    geom_line() + 
    geom_point(aes(y = median), 
              col = "red",
                alpha = 0.3) +
    geom_line(aes(y = median), 
              col = "red",
                alpha = 0.3) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = "red",
                alpha = 0.3) +
    facet_wrap(as.formula(paste("~", facet_var)), scales = "free") 
  
}

```

## Model 01 (20 species)

**Data:** Simulated continuous data

**Model:** Normal

**Parameters:** Per species sigma, per species mu


### Modelling

```{r mod01-modelfit}

mod01_datalist <- 
  list(
    n = nrow(data_sim),
    n_species = max(data_sim$species_indx),
    species_id = data_sim$species_indx,
    y = data_sim$size_class_raw
)

if(!file.exists("output/models/model_01.rds") | rerun_models){
  mod_01 <-
    stan(
      file = 'models/model_01.stan',
      data = mod01_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_01, "output/models/model_01.rds")
}

mod_01 <- readRDS("output/models/model_01.rds")
mod_01_pars <- extract_pars(stan_model = mod_01)

```

### Fit visualisation

```{r mod01-modelvis}

if(!file.exists("output/model_fits/model_01.png") | rerun_figures){
  
  mod_01_plot <- 
    plot_model_continuous(stan_model_pars = mod_01_pars, 
               raw_data = data_sim,
               dist = "norm", 
               xvar = "size_class_raw")

  save_plot(plot = mod_01_plot, 
            filename = "output/model_fits/model_01.png", 
            base_height = 10)
}

```

## Model 02 (20 species)

**Data:** Simulated continuous data

**Model:** Lognormal

**Parameters:** Per species sdlog, per species meanlog


### Modelling

```{r mod02-modelfit}

mod_02_datalist <- 
  list(
    n = nrow(data_sim),
    n_species = max(data_sim$species_indx),
    species_id = data_sim$species_indx,
    y = data_sim$size_class_raw
)

if(!file.exists("output/models/model_02.rds") | rerun_models){
  mod_02 <-
    stan(
      file = 'models/model_02.stan',
      data = mod_02_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_02, "output/models/model_02.rds")
}

mod_02 <- readRDS("output/models/model_02.rds")
mod_02_pars <- extract_pars(stan_model = mod_02)

```

### Model visualisation

```{r mod02-modelvis}


if(!file.exists("output/model_fits/model_02.png") | rerun_figures){
  
  mod_02_plot <- 
    plot_model_continuous(stan_model_pars = mod_02_pars, 
               raw_data = data_sim,
               dist = "lnorm", 
               xvar = "size_class_raw")

  save_plot(plot = mod_02_plot, 
            filename = "output/model_fits/model_02.png", 
            base_height = 10)
}


```

## Model 03 (20 species)

**Data:** Simulated binned data

**Model:** Normal

**Parameters:** Per species sigma, per species mu

### Model data wrangling

```{r mod03-datawrangling}

data_sim_count <-
  data_sim %>% 
  count(species_indx, 
         size_class, 
         size_indx) %>% 
  left_join(rls_bin_table, 
            by = join_by(size_class, size_indx)) %>% 
  add_count(species_indx, wt = n, name = "totaln_spp") %>% 
  mutate(p = n/totaln_spp) %>% 
  mutate(row = 1:n()) %>% 
    mutate(min_row = min(row), 
           max_row = max(row),
           .by = species_indx)

data_sim_byspp <-
  data_sim_count %>% 
  select(species_indx, 
         totaln_spp, 
         min_row, 
         max_row) %>% 
  distinct()
  
```


### Modelling

```{r mod03-modelfit}

mod_03_datalist <- make_datalist(data_sim_count, data_sim_byspp)
mod_03_stanfile <- "models/model_03.stan"


if(!file.exists("output/models/model_03.rds") | rerun_models){
  mod_03 <-
    stan(
      file = mod_03_stanfile,
      data = mod_03_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_03, "output/models/model_03.rds")
}

mod_03 <- readRDS("output/models/model_03.rds")
mod_03_pars <- extract_pars(stan_model = mod_03)

```


### Model visualisation

```{r mod03-modelvis}

if(!file.exists("output/model_fits/model_03.png") | rerun_figures){
  
  mod_03_plot <- 
    plot_model_binned(
      stan_model_pars = mod_03_pars, 
               raw_data = data_sim_count,
               dist = "norm", 
               xvar = "size_class", 
               facet_var = "species_indx")

  save_plot(plot = mod_03_plot, 
            filename = "output/model_fits/model_03.png", 
            base_height = 10)
}


```

## Model 04 (20 species)

**Data:** Simulated binned data

**Model:** Lognormal

**Parameters:** Per species sdlog, per species meanlog


### Modelling

```{r mod04-modelfit}

# same input data
mod_04_datalist <- mod_03_datalist
mod_04_stanfile <- "models/model_04.stan"

if(!file.exists("output/models/model_04.rds") | rerun_models){
  mod_04 <-
    stan(
      file = mod_04_stanfile,
      data = mod_04_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_04, "output/models/model_04.rds")
}

mod_04 <- readRDS("output/models/model_04.rds")
mod_04_pars <- extract_pars(stan_model = mod_04)

```


### Model visualisation

```{r mod04-modelvis}


if(!file.exists("output/model_fits/model_04.png") | rerun_figures){
  
  mod_04_plot <- 
    plot_model_binned(
      stan_model_pars = mod_04_pars, 
               raw_data = data_sim_count,
               dist = "lnorm", 
               xvar = "size_class", 
               facet_var = "species_indx")

  save_plot(plot = mod_04_plot, 
            filename = "output/model_fits/model_04.png", 
            base_height = 10)
}


```

## Model 05 (20 species)

**Data:** Real binned data

**Model:** Normal

**Parameters:** Per species sigma, per species mu

We will start by looking only at 20 species

**Note:** This uses the same stan code as modol_03, which is for the simulated data.

```{r mod5-datawrangling}

data_obs_count_20spp <- 
  data_obs_sample %>% 
  count(species_name, species_indx, size_class) %>% 
  left_join(rls_bin_table, by = join_by(size_class)) %>% 
  add_count(species_indx, wt = n, name = "totaln_spp") %>% 
  arrange(species_indx, size_indx) %>%
   mutate(p = n/totaln_spp) %>% 
  mutate(row = 1:n()) %>% 
    mutate(min_row = min(row), 
           max_row = max(row),
           .by = species_indx) 

data_obs_count_20spp_byspp <-
  data_obs_count_20spp %>% 
  select(species_indx, 
         totaln_spp, 
         min_row, 
         max_row) %>% 
  distinct() %>% 
  arrange(species_indx)


```


### Modelling

```{r mod05-modelfit}

mod_05_datalist <- make_datalist(data_obs_count_20spp, data_obs_count_20spp_byspp)
# uses the model 03 stan code
mod_05_stanfile <- "models/model_03.stan"

if(!file.exists("output/models/model_05.rds") | rerun_models){
  
  mod_05 <-
    stan(
      file = mod_05_stanfile,
      data = mod_05_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_05, "output/models/model_05.rds")
}

mod_05 <- readRDS("output/models/model_05.rds")
mod_05_pars <- extract_pars(stan_model = mod_05)

```

### Model visualisation

```{r mod05-modelvis}


if(!file.exists("output/model_fits/model_05.png") | rerun_figures){
  
  mod_05_plot <- 
    plot_model_binned(
      stan_model_pars = mod_05_pars, 
      raw_data = data_obs_count_20spp,
      dist = "norm", 
      xvar = "size_class", 
      facet_var = "species_name"
      )

  save_plot(plot = mod_05_plot, 
            filename = "output/model_fits/model_05.png", 
            base_height = 10)
}



```

## Model 06 (20 species)

**Data:** Real binned data

**Model:** Lognormal

**Parameters:** Per species sdlog, per species meanlog


### Modelling

```{r mod06-modelfit}

# same input data, and uses model 04
mod_06_datalist <- mod_05_datalist
mod_06_stanfile <- "models/model_04.stan"

if(!file.exists("output/models/model_06.rds") | rerun_models){
  mod_06 <-
    stan(
      file = mod_06_stanfile,
      data = mod_06_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_06, "output/models/model_06.rds")
}

mod_06 <- readRDS("output/models/model_06.rds")
mod_06_pars <- extract_pars(stan_model = mod_06)


```

### Model visualisation

```{r mod06-modelvis}


if(!file.exists("output/model_fits/model_06.png") | rerun_figures){
  
  mod_06_plot <- 
    plot_model_binned(
      stan_model_pars = mod_06_pars, 
      raw_data = data_obs_count_20spp,
      dist = "lnorm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_06_plot, 
            filename = "output/model_fits/model_06.png", 
            base_height = 10)
}



```

## Model 5 vs 6 (20 species)

### Model visualisation

```{r}

mod_05_out <- 
    data_obs_count_20spp %>% 
    arrange(species_indx, size_class) %>% 
    select(species_name, species_indx, size_class, size_min, size_max, p) %>% 
    full_join(mod_05_pars,
              by = join_by(species_indx),
              multiple = "all", 
              relationship = "many-to-many") %>% 
    mutate(fit = pnorm(size_max, mu, sigma) -  pnorm(size_min, mu, sigma)) %>%  
    select(species_name, species_indx, size_class, p, quantile, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit)

mod_06_out <- 
 data_obs_count_20spp %>%  
    full_join(mod_06_pars,
              by = join_by(species_indx),
              multiple = "all", 
              relationship = "many-to-many") %>% 
    mutate(fit = plnorm(size_max, meanlog, sdlog) -  
             plnorm(size_min, meanlog, sdlog)) %>%  
    select(species_name, species_indx, size_class, p, quantile, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit) 

mod_05vsmod_06_plot <-
  data_obs_count_20spp %>% 
  ggplot() +
    aes(x = size_class, 
        y = p) +
    geom_point() +
    geom_line() + 
    geom_point(aes(y = median), 
              col = "red", 
                data = mod_06_out) +
    geom_line(aes(y = median), 
              col = "red", 
                data = mod_06_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = "red",
                alpha = 0.5, 
                data = mod_06_out) +
      geom_point(aes(y = median), 
              col = "blue", 
                data = mod_05_out) +
    geom_line(aes(y = median), 
              col = "blue", 
                data = mod_05_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = "blue",
                alpha = 0.5, 
                data = mod_05_out) +
    facet_wrap(~species_name, scales = "free") +
  ggtitle("Normal (blue), lognormal (red)")

save_plot(plot = mod_05vsmod_06_plot, 
            filename = "output/model_fits/mod_05vsmod_06_plot.png", 
            base_height = 10)

```

## Model 05 (700+ species)

**Data:** Real binned data

**Model:** Normal

**Parameters:** Per species sigma, per species mu

We will start by looking only at 20 species

**Note:** This uses the same stan code as modol_03, which is for the simulated data.

```{r mod5-allspp-datawrangling}

data_obs_count_allspp <- 
  data_obs %>% 
  count(species_name, size_class) %>% 
  left_join(species_indx_table, by = join_by(species_name)) %>% 
  left_join(rls_bin_table, by = join_by(size_class)) %>% 
  add_count(species_indx, wt = n, name = "totaln_spp") %>% 
  arrange(species_indx, size_indx) %>%
  mutate(p = n/totaln_spp) %>% 
  mutate(row = 1:n()) %>% 
  mutate(min_row = min(row), 
         max_row = max(row),
         .by = species_indx) 

data_obs_count_allspp_byspp <-
  data_obs_count_allspp %>% 
  select(species_indx, 
         totaln_spp, 
         min_row, 
         max_row) %>% 
  distinct() %>% 
  arrange(species_indx)



```


### Modelling

```{r mod05-modelfit}

mod_05_allspp_datalist <- make_datalist(data_obs_count_allspp, data_obs_count_allspp_byspp)
# uses the model 03 stan code
mod_05_allspp_stanfile <- "models/model_03.stan"

if(!file.exists("output/models/model_05_allspp.rds") | rerun_models){
  
  mod_05_allspp <-
    stan(
      file = mod_05_allspp_stanfile,
      data = mod_05_allspp_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_05_allspp, "output/models/model_05_allspp.rds")
}

mod_05_allspp <- readRDS("output/models/model_05_allspp.rds")
mod_05_allspp_pars <- extract_pars(stan_model = mod_05_allspp)

```

### Model visualisation

```{r mod05-modelvis}


if(!file.exists("output/model_fits/model_05_allspp.png") | rerun_figures){
  
  mod_05_allspp_plot <- 
    plot_model_binned(
      stan_model_pars = mod_05_allspp_pars %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "norm", 
      xvar = "size_class", 
      facet_var = "species_name"
      )

  save_plot(plot = mod_05_allspp_plot, 
            filename = "output/model_fits/model_05_allspp.png", 
            base_height = 10)
}



```

## Model 06 (700+ species)

**Data:** Real binned data

**Model:** Lognormal

**Parameters:** Per species sdlog, per species meanlog

```{r mod06-modelfit}

# same input data, and uses model 04
mod_06_allspp_datalist <- mod_05_allspp_datalist
mod_06_allspp_stanfile <- "models/model_04.stan"


if(!file.exists("output/models/model_06_allspp.rds") | rerun_models){
  mod_06_allspp <-
    stan(
      file = mod_06_allspp_stanfile,
      data = mod_06_allspp_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_06_allspp, "output/models/model_06_allspp.rds")
}

mod_06_allspp <- readRDS("output/models/model_06_allspp.rds")
mod_06_allspp_pars <- extract_pars(stan_model = mod_06_allspp)



```

### Model visualisation

```{r mod06-modelvis}


if(!file.exists("output/model_fits/model_06_allspp.png") | rerun_figures){
  
  mod_06_allspp_plot <- 
    plot_model_binned(
       stan_model_pars = mod_06_allspp_pars2 %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "lnorm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_06_allspp_plot, 
            filename = "output/model_fits/model_06_allspp.png", 
            base_height = 10)
}



```

## Model 5 vs 6 (700+ species)

### Model comparison plots

```{r}

mod_05_out <- 
    data_obs_filtered %>% 
    arrange(species_indx, size_class) %>% 
    select(species_name, species_indx, size_class, size_min, size_max, p) %>% 
    full_join(mod_05_pars,
              by = join_by(species_indx),
              multiple = "all", 
              relationship = "many-to-many") %>% 
    pivot_wider(names_from = par, 
                values_from = value)  %>% 
    mutate(fit = pnorm(size_max, mu, sigma) -  pnorm(size_min, mu, sigma)) %>%  
    select(species_name, species_indx, size_class, p, quantile, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit)

mod_06_out <- 
 data_obs_filtered %>%  
    full_join(mod_06_pars,
              by = join_by(species_indx),
              multiple = "all", 
              relationship = "many-to-many") %>% 
    pivot_wider(names_from = par, 
                values_from = value)  %>% 
    mutate(fit = plnorm(size_max, meanlog, sdlog) -  
             plnorm(size_min, meanlog, sdlog)) %>%  
    select(species_name, species_indx, size_class, p, quantile, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit) 

mod_05vsmod_06_plot <-
  data_obs_filtered %>% 
  ggplot() +
    aes(x = size_class, 
        y = p) +
    geom_point() +
    geom_line() + 
    geom_point(aes(y = median), 
              col = "red", 
                data = mod_06_out) +
    geom_line(aes(y = median), 
              col = "red", 
                data = mod_06_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = "red",
                alpha = 0.5, 
                data = mod_06_out) +
      geom_point(aes(y = median), 
              col = "blue", 
                data = mod_05_out) +
    geom_line(aes(y = median), 
              col = "blue", 
                data = mod_05_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = "blue",
                alpha = 0.5, 
                data = mod_05_out) +
    facet_wrap(~species_name, scales = "free") +
  ggtitle("Normal (blue), lognormal (red)")

save_plot(plot = mod_05vsmod_06_plot, 
            filename = "output/model_fits/mod_05vsmod_06_plot.png", 
            base_height = 10)

```

### Sum of squares

```{r}

sum_squares <- 
  xx3 %>% 
  mutate(s_norm = (norm_5-p)^2,
         s_lognorm = (lognorm_5-p)^2) %>% 
  summarise(ss_norm = sum(s_norm), 
            ss_lognorm = sum(s_lognorm), 
            .by = "species_name") %>% 
  mutate(q = ss_norm/(ss_norm + ss_lognorm)) 

```

### mean vs sigma (norm)

```{r}

mod_05_pars %>% 
  ggplot(aes(x = mu, 
             y = sigma)) +
  geom_point() +
  stat_smooth()

```

### meanlog vs sdlog (lnorm)

```{r}

mod_06_pars %>% 
  ggplot(aes(x = meanlog, 
             y = sdlog)) +
  geom_point() +
  stat_smooth()

```

## Model 07 (20 species)

**Data:** Real binned data

**Model:** Normal

**Parameters:** Per species mu, sigma predicted from mu


The formula for predicting sigma:

$$
\sigma_k = \beta_0 + \beta_1 \cdot \mu_k
$$

where $k$ is the species id. 

```{r mod07-modelfit}

# same input data, and uses model 04
mod_07_datalist <- mod_05_datalist
mod_07_stanfile <- "models/model_07.stan"


if(!file.exists("output/models/model_07.rds") | rerun_models){
  mod_07 <-
    stan(
      file = mod_07_stanfile,
      data = mod_07_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_07, "output/models/model_07.rds")
}

mod_07 <- readRDS("output/models/model_07.rds")
mod_07_pars <- 
  extract_pars(stan_model = mod_07)

```

### Model checks

```{r}
mod_07 %>% traceplot(pars = "mu")
mod_07 %>% traceplot(pars = "sigma")
```

### Model visualisation

```{r mod07-modelvis}

if(!file.exists("output/model_fits/model_07.png") | rerun_figures){
  
  mod_07_plot <- 
    plot_model_binned(
       stan_model_pars = mod_07_pars, 
      raw_data = data_obs_count_20spp,
      dist = "norm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_07_plot, 
            filename = "output/model_fits/model_07.png", 
            base_height = 10)
}



```

## Model 08 (20 species)

**Data:** Real binned data

**Model:** Lognormal

**Parameters:** Per species meanlog, sdlog predicted from meanlog

The formula for predicting sdlog:

$$
\alpha_k = \beta_0 + \beta_1 \cdot \gamma_k
$$

where $k$ is the species id, and $\alpha$ and $\gamma$ represent meanlog and sdlog. 

```{r mod08-modelfit}

# same input data, and uses model 04
mod_08_datalist <- mod_05_datalist
mod_08_stanfile <- "models/model_08.stan"


if(!file.exists("output/models/model_08.rds") | rerun_models){
  mod_08 <-
    stan(
      file = mod_08_stanfile,
      data = mod_08_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_08, "output/models/model_08.rds")
}

mod_08 <- readRDS("output/models/model_08.rds")
mod_08_pars <- extract_pars(stan_model = mod_08)


```

### Model checks

```{r}
mod_08 %>% traceplot(pars = "meanlog")
mod_08 %>% traceplot(pars = "sdlog")
```


### Model visualisation

```{r mod08-modelvis}


if(!file.exists("output/model_fits/model_08.png") | rerun_figures){
  
  mod_08_plot <- 
    plot_model_binned(
       stan_model_pars = mod_08_pars, 
      raw_data = data_obs_count_20spp,
      dist = "lnorm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_08_plot, 
            filename = "output/model_fits/model_08.png", 
            base_height = 10)
}

```


## Model 07 (774 species)

**Data:** Real binned data

**Model:** Normal

**Parameters:** Per species mu, sigma predicted from mu


The formula for predicting sigma:

$$
\sigma_k = \beta_0 + \beta_1 \cdot \mu_k
$$

where $k$ is the species id. 

```{r mod07-allspp-modelfit}

# same input data, and uses model 04
mod_07_allspp_datalist <- mod_05_allspp_datalist
mod_07_allspp_stanfile <- "models/model_07.stan"


if(!file.exists("output/models/model_07.rds") | rerun_models){
  mod_07_allspp <-
    stan(
      file = mod_07_allspp_stanfile,
      data = mod_07_allspp_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_07_allspp, "output/models/model_07_allspp.rds")
}

mod_07_allspp <- readRDS("output/models/model_07_allspp.rds")
mod_07_allspp_pars <- extract_pars(stan_model = mod_07_allspp)


```


### Model visualisation

```{r mod07-allspp-modelvis}


if(!file.exists("output/model_fits/model_07_allspp.png") | rerun_figures){
  
  mod_07_allspp_plot <- 
    plot_model_binned(
       stan_model_pars = mod_07_allspp_pars %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "norm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_07_allspp_plot, 
            filename = "output/model_fits/model_07_allspp.png", 
            base_height = 10)
}



```

## Model 08 (774 species)

**Data:** Real binned data

**Model:** Lognormal

**Parameters:** Per species meanlog, sdlog predicted from meanlog

The formula for predicting sdlog:

$$
\alpha_k = \beta_0 + \beta_1 \cdot \gamma_k
$$

where $k$ is the species id, and $\alpha$ and $\gamma$ represent meanlog and sdlog. 

```{r mod08-allspp-modelfit}

# same input data, and uses model 04
mod_08_allspp_datalist <- mod_05_allspp_datalist
mod_08_allspp_stanfile <- "models/model_08.stan"


if(!file.exists("output/models/model_allspp_08.rds") | rerun_models){
  mod_08_allspp <-
    stan(
      file = mod_08_allspp_stanfile,
      data = mod_08_allspp_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_08_allspp, "output/models/model_08_allspp.rds")
}

mod_08_allspp <- readRDS("output/models/model_08_allspp.rds")
mod_08_pars <- extract_pars(stan_model = mod_08)


```

### Model visualisation

```{r mod08-allspp-modelvis}


if(!file.exists("output/model_fits/model_08_allspp.png") | rerun_figures){
  
  mod_08_allspp_plot <- 
    plot_model_binned(
       stan_model_pars = mod_08_allspp_pars %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "lnorm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_08_allspp_plot, 
            filename = "output/model_fits/model_08_allspp.png", 
            base_height = 10)
}

```


## Model 09 (20 species)

**Data:** Real binned data

**Model:** Normal (with bin correction)

**Parameters:** Per species mu, per species sigma

```{r mod09-modelfit}

# same input data, and uses model 04
mod_09_datalist <- mod_05_datalist
mod_09_stanfile <- "models/model_09.stan"


if(!file.exists("output/models/model_09.rds") | rerun_models){
  mod_09 <-
    stan(
      file = mod_09_stanfile,
      data = mod_09_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_09, "output/models/model_09.rds")
}

mod_09 <- readRDS("output/models/model_09.rds")
mod_09_pars <- extract_pars(stan_model = mod_09)

```

### Model visualisation

```{r mod09-modelvis}


if(!file.exists("output/model_fits/model_09.png") | rerun_figures){
  
  mod_09_plot <- 
    plot_model_binned(
       stan_model_pars = mod_09_pars %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "norm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_09_plot, 
            filename = "output/model_fits/model_09.png", 
            base_height = 10)
}



```



## Model 10 (20 species)

**Data:** Real binned data

**Model:** Lognormal (with bin correction)

**Parameters:** Per species mu, per species sigma

```{r mod10-modelfit}

# same input data, and uses model 04
mod_10_datalist <- mod_05_datalist
mod_10_stanfile <- "models/model_10.stan"


if(!file.exists("output/models/model_10.rds") | rerun_models){
  mod_10 <-
    stan(
      file = mod_10_stanfile,
      data = mod_10_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_10, "output/models/model_10.rds")
}

mod_10 <- readRDS("output/models/model_10.rds")
mod_10_pars <- extract_pars(stan_model = mod_10)

```


### Model visualisation

```{r mod10-modelvis}


if(!file.exists("output/model_fits/model_10.png") | rerun_figures){
  
  mod_10_plot <- 
    plot_model_binned(
       stan_model_pars = mod_10_pars %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "lnorm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_10_plot, 
            filename = "output/model_fits/model_10.png", 
            base_height = 10)
}



```



## Model 11 (20 species)

**Data:** Real binned data

**Model:** Normal (with bin correction)

**Parameters:** Per species mu, sigma predicted from mu

```{r mod11-modelfit}

# same input data, and uses model 04
mod_11_datalist <- mod_05_datalist
mod_11_stanfile <- "models/model_11.stan"

if(!file.exists("output/models/model_11.rds") | rerun_models){
  mod_11 <-
    stan(
      file = mod_11_stanfile,
      data = mod_11_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_11, "output/models/model_11.rds")
}

mod_11 <- readRDS("output/models/model_11.rds")
mod_11_pars <- extract_pars(stan_model = mod_11)

```


### Model visualisation

```{r mod11-modelvis}


if(!file.exists("output/model_fits/model_11.png") | rerun_figures){
  
  mod_11_plot <- 
    plot_model_binned(
       stan_model_pars = mod_11_pars %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "lnorm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_11_plot, 
            filename = "output/model_fits/model_11.png", 
            base_height = 10)
}



```


## Model 12 (20 species)

**Data:** Real binned data

**Model:** Lognormal (with bin correction)

**Parameters:** Per species meanlog, sdlog predicted from meanlog

```{r mod12-modelfit}

# same input data, and uses model 04
mod_12_datalist <- mod_05_datalist
mod_12_stanfile <- "models/model_12.stan"

if(!file.exists("output/models/model_12.rds") | rerun_models){
  mod_12 <-
    stan(
      file = mod_12_stanfile,
      data = mod_12_datalist,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_12, "output/models/model_12.rds")
}

mod_12 <- readRDS("output/models/model_12.rds")
mod_12_pars <- extract_pars(stan_model = mod_12)

```


### Model visualisation

```{r mod12-modelvis}


if(!file.exists("output/model_fits/model_12.png") | rerun_figures){
  
  mod_12_plot <- 
    plot_model_binned(
       stan_model_pars = mod_12_pars %>% filter(species_indx %in% 1:20), 
      raw_data = data_obs_count_allspp %>% filter(species_indx %in% 1:20),
      dist = "lnorm", 
      xvar = "size_class", 
      facet_var = "species_name")

  save_plot(plot = mod_12_plot, 
            filename = "output/model_fits/model_12.png", 
            base_height = 10)
}



```

















## All species?

Quick side note to try and run the mod05 and mod06 on all species.

```{r mod5-vsmod06-allspp-datawrangling}

species_selection <- 
  data_obs %>% 
  select(species_name) %>% 
  distinct() %>% 
  mutate(species_indx = 1:n())

data_obs_filtered <- 
  data_obs %>% 
  count(species_name, size_class) %>% 
  left_join(species_selection, by = join_by(species_name)) %>% 
  left_join(rls_bin_table, by = join_by(size_class)) %>% 
  add_count(species_indx, wt = n, name = "totaln_spp") %>% 
  arrange(species_indx, size_indx) %>%
   mutate(p = n/totaln_spp) %>% 
  mutate(row = 1:n()) %>% 
    mutate(min_row = min(row), 
           max_row = max(row),
           .by = species_indx) 

data_obs_filtered_byspp <-
  data_obs_filtered %>% 
  select(species_indx, 
         totaln_spp, 
         min_row, 
         max_row) %>% 
  distinct() %>% 
  arrange(species_indx)


```

### Visualisation

```{r mod05-datavis}

# data_obs_filtered %>% 
#   ggplot() +
#   aes(x = size_class, 
#       y = n) +
#   geom_line() +
#   geom_point() + 
#   facet_wrap_paginate(~species_name, scales = "free")

```

### Modelling

```{r mod05-vsmod06-allspp-modelfit}

data_list <- 
  list(
    I = nrow(data_obs_filtered),
    S = max(data_obs_filtered$species_indx),
    B = max(data_obs_filtered$size_indx),
    l = rls_bin_table$size_min[1:(max(data_obs_filtered$size_indx)+1)],
    N_species = data_obs_filtered_byspp$totaln_spp,
    i_min     = data_obs_filtered_byspp$min_row,
    i_max     = data_obs_filtered_byspp$max_row,
    s = data_obs_filtered$species_indx,
    b = data_obs_filtered$size_indx,
    n = data_obs_filtered$n
)


if(!file.exists("output/models/model_05_allspp.rds")){
  
  mod_05_allspp <-
    stan(
      file = 'models/model_03.stan',
      data = data_list,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_05_allspp, "output/models/model_05_allspp.rds")
}

mod_05_allspp <- readRDS("output/models/model_05_allspp.rds")

if(!file.exists("output/models/model_06_allspp.rds")){
  
  mod_06_allspp <-
    stan(
      file = 'models/model_04.stan',
      data = data_list,
      iter = 2000,
      warmup = 1000,
      chains = 3,
      refresh = 500,
      seed = 1,
      cores = 3
    )
  
  saveRDS(mod_06_allspp, "output/models/model_06_allspp.rds")
}

mod_06_allspp <- readRDS("output/models/model_06_allspp.rds")

mod_05_allspp_pars <-
  mod_05_allspp %>% 
  spread_draws(c(ln_sigma, mu)[species_indx]) %>% 
    ungroup() %>% 
    pivot_longer(cols = c(mu, ln_sigma), 
                 names_to = "par") %>% 
  summarise(quantile_025 = quantile(value, 0.025), 
            quantile_5 = quantile(value, 0.500), 
            quantile_975 = quantile(value, 0.975), 
            .by = c(species_indx, par)) %>% 
  pivot_wider(names_from = par, values_from = contains("quantile_"))
  # pivot_longer(cols = contains("quantile"), 
  #              names_prefix = "quantile_", 
  #              values_to = "value", 
  #              names_to = "quantile",
  #             names_transform = \(x) as.numeric(paste0("0.", x)))

mod_06_allspp_pars <-
  mod_06_allspp %>% 
  spread_draws(c(sdlog, meanlog)[species_indx]) %>% 
    ungroup() %>% 
    pivot_longer(cols = c(meanlog, sdlog), 
                 names_to = "par") %>% 
  summarise(quantile_025 = quantile(value, 0.025), 
            quantile_5 = quantile(value, 0.500), 
            quantile_975 = quantile(value, 0.975), 
            .by = c(species_indx, par)) %>% 
  pivot_wider(names_from = par, values_from = contains("quantile_"))
  # pivot_longer(cols = contains("quantile"), 
  #              names_prefix = "quantile_", 
  #              values_to = "value", 
  #              names_to = "quantile",
  #             names_transform = \(x) as.numeric(paste0("0.", x)))

xx <- 
  mod_05_allspp %>% 
  spread_draws(c(ln_sigma, mu)[species_indx]) %>% 
  ungroup()  %>% 
  mutate(sigma = exp(ln_sigma)) %>% 
  expand_grid(size_class = rls_bin_breaks) %>% 
  left_join(rls_bin_table) %>% 
  mutate(fit = pnorm(size_max, mu, sigma) -  
             pnorm(size_min, mu, sigma)) %>% 
  summarise(norm_025 = quantile(fit, 0.025), 
            norm_5 = quantile(fit, 0.500), 
            norm_975 = quantile(fit, 0.975), 
            .by = c(species_indx, size_class))

xx2 <- 
  mod_06_allspp %>% 
  spread_draws(c(sdlog, meanlog)[species_indx]) %>% 
  ungroup()  %>% 
  expand_grid(size_class = rls_bin_breaks) %>% 
  left_join(rls_bin_table) %>% 
  mutate(fit = plnorm(size_max, meanlog, sdlog) -  
             plnorm(size_min, meanlog, sdlog)) %>% 
  summarise(lognorm_025 = quantile(fit, 0.025), 
            lognorm_5 = quantile(fit, 0.500), 
            lognorm_975 = quantile(fit, 0.975), 
            .by = c(species_indx, size_class))

xx3 <- 
  xx %>% 
  full_join(xx2) %>% 
  right_join(data_obs_filtered)


```

### Model visualisation

```{r mod05-vsmod06-modelvis}


sum_squares <- 
  xx3 %>% 
  mutate(s_norm = (norm_5-p)^2,
         s_lognorm = (lognorm_5-p)^2) %>% 
  summarise(ss_norm = sum(s_norm), 
            ss_lognorm = sum(s_lognorm), 
            .by = "species_name") %>% 
  mutate(q = ss_norm/(ss_norm + ss_lognorm)) 

if(!file.exists("output/model_fits/model_05.png") | rerun_figures){
  
  nspp <- xx3$species_indx %>% max()
  rep_tab <-
    tibble(
    start = seq(1, nspp, 20),
    end = lead(start-1)) %>% 
    mutate(end = case_when(is.na(end) ~ nspp, 
                           TRUE ~ end)) 
for(i in 1:nrow(rep_tab)){
    
  
  data_plot <- 
    xx3 %>%
    filter(species_indx >= as.numeric(rep_tab[i, "start"]),
         species_indx <= as.numeric(rep_tab[i, "end"])) %>% 
    left_join(sum_squares) %>% 
    mutate(q = as.character(round(q, 2))) %>% 
    mutate(spp_q = paste0(species_name, ", q=", q))
  
  
mod_05_vsmod6_allspp_plot <- 
    data_plot %>% 
    ggplot() +
    aes(x = size_class, 
        y = p) +
    geom_point() +
    geom_line() +
    geom_line(aes(y = norm_5), 
              col = "blue") +
    geom_line(aes(y = lognorm_5), 
              col = "red") +
    geom_ribbon(aes(ymin = norm_025, 
                    ymax = norm_975), 
                fill = "blue", 
                alpha = 0.5) +
    geom_ribbon(aes(ymin = lognorm_025, 
                    ymax = lognorm_975), 
                fill = "red", 
                alpha = 0.5)  +
    facet_wrap(~spp_q, scales = "free")  +
  ggtitle("Normal (blue), Lognormal (red)")

 i_chr = ifelse(i > 10, paste0("0", i), paste0(i))
    
  save_plot(plot = mod_05_vsmod6_allspp_plot, 
         filename = paste0('output/model_fits/mod05_vs_mod06_allspp/page_', 
                           i_chr, 
                           '.png'), 
            base_height = 10) 

  
  }
  

}

```

```{r}


sum_squares %>% 
  ggplot(aes(x = q)) + 
  geom_density() + 
  geom_vline(xintercept = 0.5, 
             lty = 2) +
  ggtitle("0 = Normal, 1 = Lognormal")


mean_pars_norm <- 
  mod_05_allspp %>% 
  spread_draws(c(ln_sigma, mu)[species_indx]) %>% 
  ungroup() %>% 
  mutate(sigma = exp(ln_sigma)) %>% 
  summarise(mu = mean(mu), 
            sigma = mean(sigma), 
            .by = species_indx)

mean_pars_lognorm <- 
  mod_06_allspp %>% 
  spread_draws(c(sdlog, meanlog)[species_indx]) %>% 
  ungroup() %>% 
  summarise(meanlog = mean(meanlog), 
            sdlog = mean(sdlog), 
            .by = species_indx)


mean_pars_lognorm %>% 
  ggplot(aes(x = meanlog,
             y = sdlog)) + 
  geom_point() + 
  stat_smooth()

# huge sigma values!!!
mean_pars_norm %>% 
  ggplot(aes(x = mu,
             y = log(sigma))) + 
  geom_point() + 
  stat_smooth()


mean_pars_norm %>% 
  mutate(cov = sigma/mu) %>% 
  mutate(below = cov < 3) %>% 
  count(below)
  ggplot(aes(x = mu, 
             y = cov)) +
  geom_point() +
  ylim(c(NA, 3))
  
weird <- 
  mean_pars_norm %>% 
    mutate(cov = sigma/mu) %>% 
    filter(cov > 50) %>% pull(species_indx)

weird2 <- 
species_selection %>% 
  filter(species_indx %in% weird) %>% 
  pull(species_name) %>% 
  head(20)

  data_plot <- 
    xx3 %>%
    filter(species_name %in% weird2) %>% 
    left_join(sum_squares) %>% 
    mutate(q = as.character(round(q, 2))) %>% 
    mutate(spp_q = paste0(species_name, ", q=", q))
  
data_obs_filtered_byspp %>% 
  filter(totaln_spp < 800)
mean_pars_norm %>% 
  left_join(data_obs_filtered) %>% 
  ggplot(aes(x = totaln_spp, 
             y = sigma )) +
  geom_point() +
  xlim(c(NA, 1500))

mod_05_vsmod6_allspp_plot <- 
    data_plot %>% 
    ggplot() +
    aes(x = size_class, 
        y = p) +
    geom_point() +
    geom_line() +
    geom_line(aes(y = norm_5), 
              col = "blue") +
    geom_line(aes(y = lognorm_5), 
              col = "red") +
    geom_ribbon(aes(ymin = norm_025, 
                    ymax = norm_975), 
                fill = "blue", 
                alpha = 0.5) +
    geom_ribbon(aes(ymin = lognorm_025, 
                    ymax = lognorm_975), 
                fill = "red", 
                alpha = 0.5)  +
    facet_wrap(~spp_q, scales = "free")  +
  ggtitle("Normal (blue), Lognormal (red)")

```
