---
title: "What distribution best describes emperical fish species size distributions?"
author: "Freddie Heather, Shane Richards, Asta Audzijonyte"
execute: 
  comment: false
  warning: false
  error: false
  message: false 
  
---

```{r setup, include = FALSE}

if(!dir.exists("output")) dir.create("output")
if(!dir.exists("output/model_fits")) dir.create("output/model_fits")
if(!dir.exists("output/model_plots")) dir.create("output/model_plots")
if(!dir.exists("output/data_figs")) dir.create("output/data_figs")

```

# Setup

```{r packages}

library(readr)
library(dplyr)
library(ggplot2)
library(arrow)
library(rstan)
library(tidyr)
library(tidybayes, include.only = c("spread_draws"))
library(cowplot)
library(stringr)
library(rlang)
library(posterior)
library(fitdistrplus, include.only = "fitdist")
library(purrr)
library(patchwork)
library(scales)
library(magick)

rstan_options(auto_write = TRUE) # avoid recompilation of stan files

```

## Data import

```{r data-import}

data_obs   <- read_parquet("input/data/data_obs_cleaned.parquet")
data_survs <- 
  read_parquet("input/data/survey_list_m1_aus.parquet") %>% 
  mutate(lat_grid = round(latitude), 
         lon_grid = round(longitude), 
         lat_lon = paste(lat_grid, lon_grid, sep = "_")) 
data_sim <- read_parquet("input/data/data_simulated.parquet")

set.seed(1)
data_obs_sample <-
  data_obs %>% 
  filter(species_name %in% sample(unique(data_obs$species_name), 20))

```

## Data wrangling

### Wrangling functions

```{r data-wrangling}


# output clean body size bin table given a vector of body sizes
get_bintable <- function(size_vector){
  
  sizebins <- 
    size_vector %>% 
    unique() %>% 
    c(0) %>%
    sort()
  
  tibble(size_class = sizebins) %>% 
    mutate(size_indx = 0:(nrow(.)-1),
           size_min = (size_class + lag(size_class))/2,
           size_max = lead(size_min)) %>% 
    filter(size_class != 0) %>% 
    mutate(size_max = case_when(size_class == max(sizebins) ~ size_class + (size_class-size_min), 
                                TRUE ~ size_max))
}

# function that takes population number, size_class, and n
clean_data <- function(count_table, 
                           population = "population", 
                           sizes = "size_class", 
                           count = "n"){
  
  sizebin_tbl <- 
    count_table %>% 
    pull(!!sizes) %>% 
    get_bintable()
  
  popln_tbl <- 
    count_table %>% 
    select(!!population) %>% 
    distinct() %>% 
    mutate(population_indx = row_number())
  
  
  count_table %>% 
    rename(size_class := !!sizes) %>% 
    left_join(popln_tbl, by = join_by(!!population)) %>% 
    left_join(sizebin_tbl, by = join_by(size_class)) %>% 
    add_count(population_indx, wt = n, name = "population_n") %>% 
    arrange(population_indx, size_indx) %>%
    mutate(p = n/population_n) %>% 
    mutate(row = 1:n()) %>% 
    mutate(min_row = min(row), 
           max_row = max(row),
           .by = population_indx) 
  
}

# make the stan datalist for models 03 and 04
make_standata <- function(cleaned_data){
  
  poplvl_data <- 
    cleaned_data %>% 
    select(population_indx, 
           population_n, 
           min_row, 
           max_row) %>% 
    distinct() %>% 
    arrange(population_indx)
  
  sizebin_tbl <- 
    cleaned_data %>% 
    pull(size_class) %>% 
    get_bintable()
  
  
  mean_sizes <- 
    cleaned_data %>% 
    summarise(mean_size = mean(size_class, wt = n), 
              .by = population_indx) %>% 
    arrange(population_indx)
  
  list(
    I = nrow(cleaned_data),
    S = max(cleaned_data$population_indx),
    B = max(cleaned_data$size_indx),
    l = c(sizebin_tbl$size_min, sizebin_tbl$size_max[nrow(sizebin_tbl)]),
    # N_species = poplvl_data$population_n,
    i_min     = poplvl_data$min_row,
    i_max     = poplvl_data$max_row,
    s = cleaned_data$population_indx,
    b = cleaned_data$size_indx,
    n = cleaned_data$n,
    meansize = mean_sizes$mean_size
  )
}
```

```{r}


# all data
data_obs_allspp <-
  data_obs %>% 
  count(species_name, size_class) %>% 
  clean_data(population = "species_name") %>% 
  make_standata()

# sample of 20 species
data_obs_20spp <-
  data_obs_sample %>% 
  count(species_name, size_class) %>% 
  clean_data(population = "species_name") %>% 
  make_standata()

# population level data (spatially separated) - One species
data_obs_poplvl <-
  data_obs %>% 
  left_join(data_survs) %>% 
  mutate(species_latlon = paste(species_name, lat_lon, sep = "__")) %>% 
  count(species_latlon, size_class, wt = n) %>% 
  add_count(species_latlon, name = "n_sizebins") %>% 
  add_count(species_latlon, wt = n, name = "population_n") %>% 
  filter(n_sizebins >= 4, 
         population_n >= 200) %>% 
  mutate(species_name = str_extract(species_latlon, ".*(?=__)")) %>% 
  filter(species_name %in% data_obs_sample$species_name) %>% # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  clean_data(population = "species_latlon") %>% 
  make_standata()

# simulated data
data_sim %>%
  count(species_name, size_class) %>% 
  clean_data(population = "species_name") %>% 
  make_standata()
```

## Data visualisation

### Real data

```{r datavis-realdata}

if(!file.exists("output/data_figs/ssd_obs_20spp.png")){
  
  p <-
    data_obs_sample %>% 
    count(species_name, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_name, scales = "free") +
    labs(x = "Fish length (cm)",  
         y = "Fish abundance") +
    theme_bw() +
    ggtitle("Body size distribution of 20 randomly sampled species")
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_obs_20spp.png", 
            base_height = 8)
  
} else {
    "output/data_figs/ssd_obs_20spp.png" %>% magick::image_read()
}

if(!file.exists("output/data_figs/ssd_obs_20spp_log.png")){
  
  p <- 
    data_obs_sample %>% 
    count(species_name, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_name, scales = "free") +
    scale_y_log10() +
    scale_x_log10() +
    labs(x = "Log Fish length (cm)",  
         y = "Log Fish abundance") +
    theme_bw() +
    ggtitle("Log-log body size distribution of 20 randomly sampled species")
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_obs_20spp_log.png", 
            base_height = 8)
  
} else {
    "output/data_figs/ssd_obs_20spp_log.png" %>% magick::image_read()
}

```

### Simulated data

```{r datavis-simulateddata}

if(!file.exists("output/data_figs/ssd_sim_20spp.png")){
  
  p <-
    data_sim %>% 
    count(species_indx, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_indx, scales = "free") +
    labs(x = "Fish length (cm)",  
         y = "Fish abundance") +
    theme_bw()  +
    ggtitle("Log-log body size distribution of 20 simulated species", 
            subtitle = "Odd numbers are normally distributed, even are lognormally distributed")
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_sim_20spp.png", 
            base_height = 8)
  
} else {
    "output/data_figs/ssd_sim_20spp.png" %>% magick::image_read()
}

if(!file.exists("output/data_figs/ssd_sim_20spp_log.png")){
  
  p <- 
    data_sim %>% 
    count(species_indx, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_indx, scales = "free") +
    scale_y_log10() +
    scale_x_log10() +
    labs(x = "Log Fish length (cm)",  
         y = "Log Fish abundance") +
    theme_bw() +
    ggtitle("Log-log body size distribution of 20 simulated species", 
            subtitle = "Odd numbers are normally distributed, even are lognormally distributed")
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_sim_20spp_log.png", 
            base_height = 8)
  
} else {
    "output/data_figs/ssd_sim_20spp_log.png" %>% magick::image_read()
}


```


# Bayesian modelling

## Outline of models


```{r model-table}

mods_summary <-
  tribble(
    ~model_name, ~stan_file, ~data, ~data_type, ~data_source, ~varname, ~n_species, ~distribution, ~bin_correction, ~location_par, ~variance_par,
    "mod_01", "mod_01", "sim", "continuous", "data_sim", "size_class_raw", 20, "norm", "No", "per species", "per species",
    "mod_02", "mod_02",  "sim", "continuous", "data_sim", "size_class_raw", 20, "lnorm", "No", "per species", "per species",
    "mod_03", "mod_03", "sim", "binned",  "data_sim_count", "size_class", 20, "norm", "No", "per species", "per species",
    "mod_04", "mod_04",  "sim", "binned", "data_sim_count", "size_class", 20, "lnorm", "No", "per species", "per species",
    "mod_05", "mod_03", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "No", "per species", "per species",
    "mod_06", "mod_04",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "No", "per species", "per species",
    "mod_05_allspp", "mod_03", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "No", "per species", "per species",
    "mod_06_allspp", "mod_04",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "No", "per species", "per species",
    "mod_07", "mod_07", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "No", "per species", "predicted from par1",
    "mod_08", "mod_08",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "No", "per species", "predicted from par1",
    "mod_07_allspp", "mod_07", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "No", "per species", "predicted from par1",
    "mod_08_allspp", "mod_08",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "No", "per species", "predicted from par1",
    "mod_09", "mod_09", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "Yes", "per species", "per species",
    "mod_10", "mod_10",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "Yes", "per species", "per species",
    "mod_09_allspp", "mod_09", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "Yes", "per species", "per species",
    "mod_10_allspp", "mod_10",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "Yes", "per species", "per species",
    "mod_11", "mod_11", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "Yes", "per species", "predicted from par1",
    "mod_12", "mod_12",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "Yes", "per species", "predicted from par1",
    "mod_11_allspp", "mod_11", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "Yes", "per species", "predicted from par1",
    "mod_12_allspp", "mod_12",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "Yes", "per species", "predicted from par1",
    "mod_13", "mod_13",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "norm & lnorm", "Yes", "per species", "per species",
    "mod_13_allspp", "mod_13",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "norm & lnorm", "Yes", "per species", "per species",
    "mod_13_poplvl", "mod_13",  "real", "binned", "data_obs_count_poplvl", "size_class", 774, "norm & lnorm", "Yes", "per species", "per species",
    "mod_14_poplvl", "mod_14",  "real", "binned", "data_obs_count_poplvl", "size_class", 774, "norm & lnorm", "Yes", "per species", "predicted from par1",
  )

```


## Modelling functions

```{r modelling-functions}

# run a single stan model
run_stanmod <- function(mod_name, 
                        return_model = FALSE,
                        save_model = FALSE, 
                        iter = 2000, 
                        warmup = 1500, 
                        chains = 3, 
                        init_r = 2){
  
  mod_fits_filename <- paste0("output/model_fits/", mod_name, ".rds")
  
  if(!file.exists(mod_fits_filename) | save_model){
    
    stanfile <-
      mods_summary %>% 
      filter(model_name == mod_name)  %>% 
      pull(stan_file) %>% 
      paste0("input/models/", ., ".stan")
    
    datalist <- make_datalist(mod_name)
    
    mod_fit <-
      stan(stanfile,
           data = datalist,
           iter = iter,
           warmup = warmup,
           chains = chains,
           refresh = 500,
           init_r = init_r,
           seed = 1,
           cores = chains,
           save_dso = FALSE
      )
    
    saveRDS(mod_fit, mod_fits_filename)
  }
  if(return_model) return(readRDS(mod_fits_filename))
}

# run multiple stan models
save_models <- function(model_nums, 
                        all_species = FALSE, 
                        poplvl = FALSE,
                        return_model = FALSE,
                        save_model = FALSE, 
                        init_r = 2){
  
  model_nums %>% 
    str_pad(pad = "0", width = 2) %>% 
    paste0("mod_", .) %>% 
    {if(all_species) paste0(., "_allspp") else .} %>% 
    {if(poplvl) paste0(., "_poplvl") else .} %>% 
    map(run_stanmod, 
        return_model = return_model, 
        save_model = save_model, 
        init_r = init_r)
}



# extract parameters from a stan model in a tidy way
extract_pars <- function(stan_model, save_pars = TRUE){
  
  pars_filename <- paste0("output/model_pars/", stan_model, ".csv")
  
  if(!file.exists(pars_filename) | save_pars){
    pars_output <- 
      run_stanmod(stan_model, 
                  save_model = FALSE,
                  return_model = TRUE) %>%
      summarise_draws() %>% 
      mutate(species_indx = str_extract(variable, "(?<=\\[)\\d*(?=\\])") %>% as.numeric()) %>% 
      mutate(parameter = str_remove(variable, "\\[\\d*\\]")) %>% 
      filter(!str_detect(parameter, "ln_")) %>% # transformed from generated quantities
      filter(!str_detect(parameter, "logit_")) %>% # transformed from generated quantities
      filter(parameter != "lp__") %>% 
      dplyr::select(species_indx, 
                    parameter, 
                    median,
                    q5, 
                    q95) %>% 
      drop_na(species_indx) %>% 
      pivot_wider(values_from = median:q95,
                  names_from = parameter) %>% 
      pivot_longer(cols = contains(c("median_", "q5_", "q95_")), 
                   names_to = c("quantile", "parameter"),
                   names_pattern = "(.*?)_(.*)") %>% # non-greedy
      pivot_wider(values_from = value, 
                  names_from = parameter)
    
    write_csv(x = pars_output, file = pars_filename)
  } else {
    pars_output <- read_csv(pars_filename, show_col_types = FALSE)
  }
  return(pars_output)
}


```

## Plotting functions

```{r plotting-functions}

plot_multiple_mods <- function(model_nums, 
                               all_species = FALSE, 
                               poplvl = FALSE,
                               save_plot = FALSE,
                               save_pars = FALSE){
  
  
  model_nums %>% 
    str_pad(pad = "0", width = 2) %>% 
    paste0("mod_", .) %>% 
    {if(all_species) paste0(., "_allspp") else .} %>% 
    {if(poplvl) paste0(., "_poplvl") else .} %>% 
    map(plot_mod_fit, 
        save_plot = save_plot, 
        save_pars = save_pars)
}



plot_mod_fit <- function(mod_name, save_plot = FALSE, save_pars = FALSE){
  
  mod_row <- mods_summary %>% filter(model_name == mod_name) 
  
  mod_plots_filename <- paste0("output/model_plots/", mod_name, ".png")
  mod_pars <- extract_pars(mod_name, save_pars = save_pars)
  rawdata <- eval(parse(text = mod_row$data_source))
  dist <- mod_row$distribution
  xvar <- mod_row$varname
  data_type <- mod_row$data_type
  all_spp <- str_detect(mod_name, "allspp")
  bin_corr <- str_detect(mod_row$bin_correction, "Yes")
  var_est <- str_detect(mod_row$variance_par, "predicted")
  
  facet_name <- 
    ifelse(
      mod_row$data == "real", 
      "species_name", 
      "species_indx"
    )
  
  subtitle = paste(
    if(all_spp){"774 species, "} else {"20 species, "},
    if(bin_corr){"Corrected for first bin, "} else {"Not corrected for first bin, "},
    if(dist == "norm"){
      if(var_est){"sigma predicted from mu, "} else {"per-species sigma, "}
    } else if(dist == "lnorm") {
      if(var_est){"sdlog predicted from meanlog, "} else {"per-species sdlog, "}
    } else if(dist == "norm & lnorm"){
      if(var_est){"variance pars predicted from location pars, "} else {"per-species variance pars, "}
    },
    if(mod_row$data == "real"){"real data."} else {"simulated data."}
  )
  
  if(!file.exists(mod_plots_filename) | save_plot){
    
    if(data_type == "continuous"){
      mod_plot <- 
        plot_model_continuous(stan_model_pars = mod_pars, 
                              raw_data = rawdata,
                              dist = dist, 
                              xvar = xvar, 
                              facet_var = facet_name, 
                              sub = subtitle)
    }
    
    if(data_type == "binned"){
      mod_plot <- 
        plot_model_binned(stan_model_pars = mod_pars, 
                          raw_data = rawdata,
                          dist = dist, 
                          xvar = xvar, 
                          facet_var = facet_name, 
                          allspp = all_spp, 
                          sub = subtitle)
    }
    
    save_plot(plot = mod_plot, 
              filename = mod_plots_filename, 
              base_height = 8)
  }
  
}


# plot a stan model fit to continuous body size (i.e. simulated data)
plot_model_continuous <- function(stan_model_pars, 
                                  raw_data,  
                                  dist, 
                                  xvar, 
                                  facet_var = "species_indx", 
                                  sub = ""){
  
  
  raw_data %>% 
    full_join(stan_model_pars,
              by = join_by(species_indx),
              multiple = "all")  %>% 
    {if(dist == "norm") mutate(., 
                               fit = dnorm(!!sym(xvar), 
                                           mu, sigma)) else .} %>% 
    {if(dist == "lnorm") mutate(., 
                                fit = dlnorm(!!sym(xvar), 
                                             meanlog, sdlog)) else .} %>%
    dplyr::select(!!sym(facet_var), !!sym(xvar), quantile, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit) %>%
    ggplot() +
    aes(x = !!sym(xvar)) +
    geom_density() +
    geom_line(aes(y = median), 
              col = if(dist == "norm"){"blue"}else{"red"} ,
              alpha = 0.5) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = if(dist == "norm"){"blue"}else{"red"},
                alpha = 0.5) +
    facet_wrap(as.formula(paste("~", facet_var)), scales = "free")  +
    ggtitle(label = sub,
            subtitle = paste0(dist, " (", if(dist == "norm"){"blue"}else{"red"}, ")"))
  
}

# plot a stan model fit to binned body size (e.g. RLS data)
plot_model_binned <- function(stan_model_pars, 
                              raw_data,  
                              dist, 
                              xvar, 
                              facet_var = "species_indx", 
                              allspp, 
                              sub = ""){
  
  if(dist == "norm & lnorm"){
    
    raw_data %>% 
      full_join(stan_model_pars,
                by = join_by(species_indx),
                multiple = "all")  %>% 
      {if(allspp) filter(., species_indx %in% 1:20) else .} %>% 
      mutate(fit_norm = pnorm(size_max, mu, sigma) -  pnorm(size_min, mu, sigma), 
             fit_lnorm = plnorm(size_max, meanlog, sdlog) - plnorm(size_min, meanlog, sdlog)) %>% 
      dplyr::select(!!sym(facet_var), !!sym(xvar), quantile, p, norm = fit_norm, lnorm = fit_lnorm) %>% 
      pivot_wider(names_from = quantile,
                  values_from = c(norm, lnorm)) %>%
      ggplot() +
      aes(x = !!sym(xvar), 
          y = p) +
      geom_point() +
      geom_line() + 
      geom_point(aes(y = norm_median), 
                 col = "blue",
                 alpha = 0.5) +
      geom_line(aes(y = norm_median), 
                col = "blue",
                alpha = 0.5) +
      geom_ribbon(aes(ymin = norm_q5,
                      ymax = norm_q95),
                  fill = "blue",
                  alpha = 0.5) +
      geom_point(aes(y = lnorm_median), 
                 col = "red",
                 alpha = 0.5) +
      geom_line(aes(y = lnorm_median), 
                col = "red",
                alpha = 0.5) +
      geom_ribbon(aes(ymin = lnorm_q5,
                      ymax = lnorm_q95),
                  fill = "red",
                  alpha = 0.5) +
      facet_wrap(as.formula(paste("~", facet_var)), scales = "free")  +
      ggtitle(label = paste0(dist, " (", if(dist == "norm"){"blue"}else{"red"}, ")"), 
              subtitle = sub)
    
  } else {
    
    xx <- raw_data %>% 
      full_join(stan_model_pars,
                by = join_by(species_indx),
                multiple = "all")  %>% 
      {if(allspp) filter(., species_indx %in% 1:20) else .} %>% 
      {if(dist == "norm") mutate(., 
                                 fit = pnorm(size_max, mu,sigma) -  
                                   pnorm(size_min, mu, sigma)) else .} %>% 
      {if(dist == "lnorm") mutate(., 
                                  fit = plnorm(size_max, meanlog, sdlog) -  
                                    plnorm(size_min, meanlog, sdlog)) else .} %>%
      dplyr::select(!!sym(facet_var), !!sym(xvar), quantile, p, fit) %>% 
      pivot_wider(names_from = quantile,
                  values_from = fit) %>%
      ggplot() +
      aes(x = !!sym(xvar), 
          y = p) +
      geom_point() +
      geom_line() + 
      geom_point(aes(y = median), 
                 col = if(dist == "norm"){"blue"}else{"red"},
                 alpha = 0.5) +
      geom_line(aes(y = median), 
                col = if(dist == "norm"){"blue"}else{"red"},
                alpha = 0.5) +
      geom_ribbon(aes(ymin = q5,
                      ymax = q95),
                  fill = if(dist == "norm"){"blue"}else{"red"},
                  alpha = 0.5) +
      facet_wrap(as.formula(paste("~", facet_var)), scales = "free")  +
      ggtitle(paste0(dist, " (", if(dist == "norm"){"blue"}else{"red"}, ")"), 
              subtitle = sub)
  }
  
}

comparison_plot <- function(mod1, mod2, plot_title = ""){
  
  mod_row1 <- mods_summary %>% filter(model_name == mod1) 
  mod_row2 <- mods_summary %>% filter(model_name == mod2) 
  
  mod_pars1 <- extract_pars(mod1)
  mod_pars2 <- extract_pars(mod2)
  
  rawdata1 <- eval(parse(text = mod_row1$data_source))
  rawdata2 <- eval(parse(text = mod_row2$data_source))
  
  # if(rawdata1 != rawdata2) return("Non-compatable comparison, models must use the same data")
  
  dist1 <- mod_row1$distribution
  dist2 <- mod_row2$distribution
  
  bin_corr1 <- str_detect(mod_row1$bin_correction, "Yes")
  bin_corr2 <- str_detect(mod_row2$bin_correction, "Yes")
  
  get_model_fits <- function(rawdata, mod_pars, dist){
    rawdata %>% 
      arrange(species_indx, size_class) %>% 
      dplyr::select(species_name, species_indx, size_class, size_min, size_max, p) %>% 
      full_join(mod_pars,
                by = join_by(species_indx),
                multiple = "all") %>% 
      {if(dist == "norm") mutate(., fit = pnorm(size_max, mu, sigma) -
                                   pnorm(size_min, mu, sigma)) else .} %>% 
      {if(dist == "lnorm") mutate(.,  fit = plnorm(size_max, meanlog, sdlog) -  
                                    plnorm(size_min, meanlog, sdlog)) else .} %>%
      dplyr::select(species_name, species_indx, size_class, p, quantile, fit) %>% 
      pivot_wider(names_from = quantile,
                  values_from = fit)
  }
  
  mod1_out <- get_model_fits(rawdata1, mod_pars1, dist1)
  mod2_out <- get_model_fits(rawdata2, mod_pars2, dist2)
  
  mod_plot <-
    rawdata1 %>% 
    ggplot() +
    aes(x = size_class, 
        y = p) +
    geom_point() +
    geom_line() + 
    geom_point(aes(y = median), 
               col = if(dist1 == "norm"){"blue"}else{"red"}, 
               alpha = 0.5,
               data = mod1_out) +
    geom_line(aes(y = median), 
              col = if(dist1 == "norm"){"blue"}else{"red"},
              alpha = 0.5,
              lty = if(bin_corr1){1}else{2},
              data = mod1_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = if(dist1 == "norm"){"blue"}else{"red"},
                alpha = 0.5,
                data = mod1_out) +
    geom_point(aes(y = median), 
               col = if(dist2 == "norm"){"blue"}else{"red"}, 
               alpha = 0.5,
               data = mod2_out) +
    geom_line(aes(y = median), 
              col = if(dist2 == "norm"){"blue"}else{"red"}, 
              alpha = 0.5,
              lty = if(bin_corr2){1}else{2},
              data = mod2_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = if(dist2 == "norm"){"blue"}else{"red"}, 
                alpha = 0.5,
                data = mod2_out) +
    facet_wrap(~species_name, scales = "free") +
    ggtitle(label = plot_title, 
            subtitle = "Normal (blue), lognormal (red), bin correction (dotted = no, solid = yes)")
  
  save_plot(plot = mod_plot, 
            filename = paste0("output/model_plots/", mod1, "_vs_", mod2, ".png"), 
            base_height = 8)
}



```


## Models

### Running models

```{r}


xx1 <-
  stan("input/models/mod_13.stan",
     data = data_obs_poplvl,
     iter = 2000,
     warmup = 1500,
     chains = 3,
     refresh = 500,
     init_r = 1,
     seed = 1,
     cores = 3,
     save_dso = FALSE
)

xx <- stan("input/models/mod_14.stan",
     data = data_obs_poplvl,
     iter = 2000,
     warmup = 1500,
     chains = 3,
     refresh = 500,
     init_r = 1,
     seed = 1,
     cores = 3,
     save_dso = FALSE
)

xx %>% traceplot("meanlog")
xx %>% traceplot("mu")
xx %>% traceplot("sdlog")
xx %>% traceplot("sigma")
xx %>% traceplot("select_s")
xx %>% traceplot("select_mu")
summary(xx)$summary[, "n_eff"] %>% sort()



save_models(model_nums = 1:13, 
            init_r = 1, 
            all_species = FALSE,
            return_model = FALSE,
            save_model = FALSE)

save_models(model_nums = 13, 
            init_r = 1, 
            all_species = TRUE,
            return_model = FALSE,
            save_model = FALSE)


```

### Plot models

```{r}

plot_multiple_mods(model_nums = 13, 
                   all_species = FALSE,
                   save_plot = FALSE, 
                   save_pars = FALSE)

```

### Comparing models

```{r}

comparison_plot("mod_05", "mod_06", "norm vs lnorm, variance per species")
comparison_plot("mod_07", "mod_08", "norm vs lnorm, variance estimated")
comparison_plot("mod_09", "mod_10", "norm vs lnorm, variance per species (with bin correction)")
comparison_plot("mod_11", "mod_12", "norm vs lnorm, variance estimated (with bin correction)")
comparison_plot("mod_05", "mod_09", 
                "norm, correction vs no-correction, variance per species (with bin correction)")
comparison_plot("mod_06", "mod_10", 
                "norm, correction vs no-correction, variance per species (with bin correction)")
comparison_plot("mod_07", 
                "mod_11", "norm, correction vs no-correction, variance estimated (with bin correction)")

comparison_plot("mod_05", "mod_07", "norm, variance per species vs estimated")
comparison_plot("mod_06", "mod_08", "lnorm, variance per species vs estimated")
comparison_plot("mod_09", "mod_11", "norm, variance per species vs estimated (with bin correction)")
comparison_plot("mod_10", "mod_12", "lnorm, variance per species vs estimated (with bin correction)")

```

# Further analysis

## Population level

```{r}


read_rds("output/model_fits/mod_13_poplvl.rds")

xx <- run_stanmod("mod_13_poplvl", 
                   save_model = FALSE,
                   return_model = TRUE)

xx2 <- run_stanmod("mod_14_poplvl", iter = 4000, warmup = 3500,
                   save_model = FALSE,
                   return_model = TRUE)

xx2 %>% traceplot(paste0("meanlog[", 1:100, "]"))
xx2 %>% traceplot("sigma")
xx2 %>% traceplot("meanlog")
xx2 %>% traceplot("sdlog")


logis <- function(x, mu, s) 1/(1+exp(-(x-mu)/s))

tibble(x = seq(0, 20, by = 0.1)) %>% 
  mutate(p = logis(x, 0.75, 0.19))%>% 
  ggplot(aes(x = x, y = p)) +
  geom_line() + 
  geom_vline(xintercept = 2.5) + 
  geom_vline(xintercept = 1.25, lty = 2)

read_rds("output/model_fits/mod_13_poplvl.rds")

mod_13_poplvl_pars <- 
  extract_pars("mod_13_poplvl", save_pars = TRUE) %>% 
  left_join(species_indx_table_poplvl) %>% 
  rename(species_lat_lon = species_name) %>% 
  mutate(species_name = str_extract(species_lat_lon, ".*(?=__)"), 
         lat = str_extract(species_lat_lon, "(?<=__).*(?=_)") %>% as.numeric(), 
         lon = str_extract(species_lat_lon, "(?<=_)(\\d|-)*$") %>% as.numeric()) %>% 
  left_join(summarise(data_obs_count_allspp, 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) 

raw_data <- 
  data_obs_count_poplvl %>% 
  rename(species_lat_lon = species_name)

stan_model_pars <- mod_13_poplvl_pars


raw_data %>% 
  left_join(stan_model_pars,
            multiple = "all")  %>% 
  mutate(fit_norm = pnorm(size_max, mu, sigma) -  pnorm(size_min, mu, sigma), 
         fit_lnorm = plnorm(size_max, meanlog, sdlog) - plnorm(size_min, meanlog, sdlog)) %>% 
  dplyr::select(lat, lon, size_class, quantile, p, norm = fit_norm, lnorm = fit_lnorm) %>% 
  pivot_wider(names_from = quantile,
              values_from = c(norm, lnorm)) %>%
  ggplot() +
  aes(x = size_class, 
      y = p) +
  geom_point() +
  geom_line() + 
  geom_point(aes(y = norm_median), 
             col = "blue",
             alpha = 0.5) +
  geom_line(aes(y = norm_median), 
            col = "blue",
            alpha = 0.5) +
  geom_ribbon(aes(ymin = norm_q5,
                  ymax = norm_q95),
              fill = "blue",
              alpha = 0.5) +
  geom_point(aes(y = lnorm_median), 
             col = "red",
             alpha = 0.5) +
  geom_line(aes(y = lnorm_median), 
            col = "red",
            alpha = 0.5) +
  geom_ribbon(aes(ymin = lnorm_q5,
                  ymax = lnorm_q95),
              fill = "red",
              alpha = 0.5) +
  facet_grid(lon~lat, scales = "free")

```


## Parameter regression

```{r}


# mod_13_fit <- run_stanmod("mod_13_poplvl", overwrite = FALSE)


mod_13_pars %>% 
  filter(quantile == "median") %>% 
  ggplot(aes(x = meanlog) ) +
  geom_density()

mod_13_pars %>% 
  filter(quantile == "median") %>% 
  ggplot(aes(mu, cv)) +
  geom_point()

mod_13_pars %>% 
  filter(quantile == "median") %>% 
  ggplot(aes(meanlog, sdlog)) +
  geom_point()

mod_13_pars_extra <-
  mod_13_pars 

mod_13_pars_extra %>% 
  filter(quantile == "median") %>% 
  filter(species_name == "Abudefduf bengalensis") %>% 
  ggplot(aes(x = mu, 
             y = lat)) +
  geom_point() +
  stat_smooth() 

mod_13_pars_extra %>% 
  filter(quantile == "median") %>% 
  filter(species_name %in% head(species_list, 20)) %>% 
  ggplot(aes(x = lat, 
             y = mu)) +
  geom_point() +
  stat_smooth(method = "lm") +
  facet_wrap(~species_name, scales = "free")

output_table <- tibble()
for(sp in unique(mod_13_pars_extra$species_name)){
  for(par in c("mu", "sigma", "sdlog", "meanlog")){
    
    mod_formula <- as.formula(paste0(par, "~ lat"))
    
    mod_vals <- 
      mod_13_pars_extra %>% 
      filter(quantile == "median") %>% 
      filter(species_name == sp ) %>% 
      lm(mod_formula, data = .) %>% 
      broom::tidy()
    
    output_table <-
      output_table %>% 
      bind_rows(
        tibble(
          species_name = sp, 
          parameter = par,
          slope = mod_vals$estimate[2], 
          intercept = mod_vals$estimate[1],
          slope_p = mod_vals$p.value[2], 
          intercept_p = mod_vals$p.value[1] 
        )
      )
  }
  
}


output_table %>% 
  left_join(summarise(data_obs_count_allspp %>% mutate(species_name =str_extract(species_name, ".*(?=__)")), 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) %>% 
  ggplot(aes(x = mean_size, 
             y = slope)) +
  
  geom_point() + 
  stat_smooth() +
  facet_wrap(~parameter)




compare_pars_plot <- function(norm_mod, lnorm_mod, xlim = c(NA, NA), ylim = c(NA, NA)){
  
  norm_pars <- extract_pars(norm_mod) %>% filter(quantile == "median")
  lnorm_pars <- extract_pars(lnorm_mod) %>% filter(quantile == "median")
  
  norm_lm <- lm(sigma ~ mu, data = norm_pars)
  lnorm_lm <- lm(sdlog ~ meanlog, data = lnorm_pars)
  
  p1 <- 
    mod_05_allspp_pars %>% 
    mutate(fit = predict(norm_lm)) %>% 
    ggplot() +
    aes(
      x = mu, 
      y = sigma
    ) +
    geom_point() +
    geom_line(aes(y = fit)) +
    geom_line(aes(y = fit), 
              col = "blue") +
    stat_smooth(col = "orange") +
    theme_cowplot(20)
  
  p2 <- 
    mod_06_allspp_pars %>% 
    mutate(fit = predict(lnorm_lm)) %>% 
    ggplot() +
    aes(
      x = meanlog, 
      y = sdlog
    ) +
    geom_point() +
    geom_line(aes(y = fit), 
              col = "red") +
    stat_smooth() +
    stat_smooth(col = "orange") +
    theme_cowplot(20)
  
  p3 <- p1 + p2
  
  save_plot(filename = paste0("output/figures/", norm_mod, "_vs_", lnorm_mod, "_pars.png"), 
            plot = p3, 
            base_height = 8, 
            base_asp = 1.618*2)
}


get_ll <- function(mod_data, species_indx, sigma, mu, meanlog, sdlog, eps_LN, eps_N){
  
  f <- c()
  l <- mod_data$l
  b <-  mod_data$b
  i_min <- mod_data$i_min
  i_max <- mod_data$i_max
  B <-  mod_data$B
  n <-  mod_data$n
  
  
  for (k in 1:B) {
    f[k] = (l[k+1] - l[k]) / (l[B+1] - l[1]);	#// calculate relative bin widths
  }
  
  ll_norm = 0
  ll_lnorm = 0
  
  norm_c_N = 1.0 - pnorm(l[1], mu, sigma); 
  norm_c_LN = 1.0 - plnorm(l[1], meanlog, sdlog); 
  
  for (j in i_min[species_indx]:i_max[species_indx]) { #// observation j
    # // probability of being in bin (prior to misclassification)
    p_N = (pnorm(l[b[j]+1], mu, sigma) - 
             pnorm(l[b[j]], mu, sigma)) / norm_c_N; 
    # // add misclassification probability (ensures non-zero p)
    p_N = (1.0 - eps_N)*p_N + eps_N*f[b[j]]; 
    
    # // probability of being in bin (prior to misclassification)
    p_LN = (plnorm(l[b[j]+1], meanlog, sdlog) - 
              plnorm(l[b[j]], meanlog, sdlog)) / norm_c_LN;
    # // add misclassification probabily (ensures non-zero p)
    p_LN = (1.0 - eps_LN)*p_LN + eps_LN*f[b[j]]; 
    
    ll_norm = ll_norm + n[j]*log(p_N) 
    ll_lnorm = ll_lnorm + n[j]*log(p_LN); 
  }
  return(tibble(ll_norm, ll_lnorm))
}




```

## Log-likelihood comparison

```{r}

if(!file.exists("output/likelihoods/mod_13_poplvl.parquet")){
  par_table <- 
    run_stanmod("mod_13_allspp") %>% 
    posterior::as_draws_df() %>% 
    mutate(draws = row_number()) %>% 
    pivot_longer(cols = -draws) %>% 
    filter(!str_detect(name, "ln")) %>% 
    mutate(species_indx = str_extract(name, "(?!\\[)\\d*(?=\\])") %>% as.numeric(),
           parameter = str_extract(name, ".*(?=\\[.*)")) %>% 
    drop_na(species_indx) %>% 
    select(-name) %>% 
    pivot_wider(names_from = parameter, 
                values_from = value) 
  
  par_table2 <- 
    par_table %>% 
    mutate(ll = pmap(.l = list(species_indx = species_indx, 
                               sigma = sigma, 
                               mu = mu, 
                               meanlog = meanlog, 
                               sdlog = sdlog,
                               eps_N = eps_N,
                               eps_LN = eps_LN), 
                     .f = get_ll,
                     mod_data = mod_13_allspp_data)) 
  
  par_table3 <- 
    par_table2 %>% 
    unnest(cols = ll) %>% 
    pivot_longer(cols = c(ll_norm, ll_lnorm), 
                 names_to = "dist", 
                 values_to = "ll") %>% 
    left_join(data_obs_count_allspp %>% 
                select(species_indx, species_name) %>% distinct()) 
  
  
  write_parquet(par_table3, "output/likelihoods/mod_13_poplvl.parquet")
}

par_table3 <- read_parquet("output/likelihoods/mod_13_poplvl.parquet")


ll_wide <- 
  par_table3 %>% 
  pivot_wider(names_from = dist, 
              values_from = ll) %>% 
  mutate(diff = ll_norm - ll_lnorm) %>% 
  summarise(norm_better = sum(diff>0)/1500, 
            .by = species_name) 

prop_better <-
  ll_wide %>% 
  ggplot() +
  aes(x = norm_better) + 
  geom_rect(aes(ymin = -Inf, ymax = Inf, xmin = 0, xmax = 0.5), fill = "red", alpha = 0.5) +
  geom_rect(aes(ymin = -Inf, ymax = Inf, xmin = 0.5, xmax = 1), fill = "blue", alpha = 0.5) +
  geom_density(linewidth = 2) +
  geom_rug() +
  theme_cowplot(20) +
  labs(x = "Proportion of samples where Normal is better") 


save_plot("output/figures/proportion_samples_normal.png",
          prop_better,  
          base_height = 8)



ll_wide %>% 
  mutate(group = case_when(norm_better > 0.9 ~ "Always Normal",
                           norm_better < 0.1 ~ "Always Logormal", 
                           TRUE ~ "inconclusive")) %>% 
  left_join(summarise(data_obs_count_allspp, 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) %>% 
  ggplot(aes(y = group, x = mean_size)) +
  geom_boxplot()


ll_wide_normalised <- 
  par_table3 %>% 
  left_join(data_obs_count_allspp_byspp) %>% 
  mutate(ll = ll/totaln_spp) %>% 
  pivot_wider(names_from = dist, 
              values_from = ll) %>% 
  mutate(diff = ll_norm - ll_lnorm) 

ll_perspp_normalised <- 
  ll_wide_normalised %>% 
  summarise(diff = median(diff), 
            ll_norm = median(ll_norm), 
            ll_lnorm = median(ll_lnorm),
            .by = species_name)

plot_ll_normalised <- 
  ll_perspp_normalised %>%
  left_join(summarise(data_obs_count_allspp, 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) %>% 
  left_join(ll_wide) %>% 
  ggplot() +
  aes(
    x = mean_size,
    y = diff
  ) + 
  geom_rect(aes(ymin = -Inf, ymax = 0, xmin = -Inf, xmax = Inf), fill = "red", alpha = 0.5) +
  geom_rect(aes(ymin = 0, ymax = Inf, xmin = -Inf, xmax = Inf), fill = "blue", alpha = 0.5) +
  geom_point(size = 2) +
  stat_smooth(col = "orange") +
  labs(x = "Species mean size", 
       y = "Normalised loglikelighood ratio (norm_LL_N-norm_LL_LN)") +
  theme_cowplot(20)

plot_ll_normalised_v2 <- 
  ll_perspp_normalised %>%
  left_join(summarise(data_obs_count_allspp, 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) %>% 
  left_join(ll_wide) %>% 
  ggplot() +
  aes(
    x = mean_size,
    y = diff,
    col = norm_better
  ) + 
  geom_point(size = 2) +
  stat_smooth(col = "orange") +
  labs(x = "Species mean size", 
       y = "Normalised loglikelighood ratio (norm_LL_N-norm_LL_LN)") +
  theme_cowplot(20)


save_plot("output/figures/normalised_ll_proof.png",
          plot_ll_normalised_v2,  
          base_height = 8)

plot_ll_normalised_v3 <- 
  ll_perspp_normalised %>%
  pivot_longer(cols = starts_with("ll_")) %>% 
  left_join(summarise(data_obs_count_allspp, 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) %>% 
  left_join(ll_wide) %>% 
  ggplot() +
  aes(
    x = mean_size,
    y = value,
    col = name
  ) + 
  # geom_rect(aes(ymin = -Inf, ymax = 0, xmin = -Inf, xmax = Inf), fill = "red", alpha = 0.5) +
  # geom_rect(aes(ymin = 0, ymax = Inf, xmin = -Inf, xmax = Inf), fill = "blue", alpha = 0.5) +
  geom_point(size = 2, alpha = 0.5) +
  stat_smooth() +
  labs(x = "Species mean size (cm)", 
       y = "Normalised loglikelighood") +
  theme_cowplot(20)



save_plot("output/figures/normalised_ll_bydist.png",
          plot_ll_normalised_v3,  
          base_height = 8)







ll_wide %>% 
  
  left_join(summarise(data_obs_count_allspp, 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) %>% 
  ggplot() + 
  aes(
    x = mean_size, 
    y = norm_better
  ) +
  geom_point() +
  stat_smooth()


ll_wide %>% 
  left_join(data_obs_count_allspp %>% select(species_name, species_indx) %>% distinct()) %>% 
  left_join(data_obs_count_allspp_byspp) %>% 
  ggplot() + 
  aes(
    x = totaln_spp %>% log(), 
    y = norm_better 
  ) +
  geom_point() +
  stat_smooth()

ll_wide %>% 
  summarise


par_table3 %>% 
  pivot_wider(names_from = dist, 
              values_from = ll) %>% 
  # arrange(species_indx) %>% 
  reframe(sum_ll_norm = sum(ll_norm), 
          sum_ll_lnorm = sum(ll_lnorm), 
          mean_ll_norm = mean(ll_norm), 
          mean_ll_lnorm = mean(ll_lnorm),
          diff = mean(ll_norm - ll_lnorm), 
          .by = species_name) %>% 
  mutate(diff2 = mean_ll_norm - mean_ll_lnorm) %>% View()
mutate(norm_better = sum_ll_norm > sum_ll_lnorm,
       norm_better2 = mean_ll_norm > mean_ll_lnorm, 
       norm_better3 = diff > 0) %>% 
  filter(norm_better != norm_better3)
count(norm_better)


ll_ratio_plot <- 
  par_table3 %>% 
  pivot_wider(names_from = dist, 
              values_from = ll) %>% 
  mutate(diff = ll_norm - ll_lnorm) %>% 
  summarise(mean_ratio = median(diff), 
            .by = species_name) %>% 
  arrange(desc(mean_ratio)) %>% 
  left_join(summarise(data_obs_count_allspp, 
                      mean_size = mean(size_class, wt = n), 
                      .by = species_name)) %>% 
  ggplot(aes(mean_size, 
             mean_ratio %>% log())) +
  geom_ribbon(aes(ymin = 0, ymax = Inf, xmin = -Inf, xmax = Inf), fill = "blue", alpha = 0.8) +
  geom_ribbon(aes(ymin = -Inf, ymax = 0, xmin = -Inf, xmax = Inf), fill = "red", alpha = 0.8) +
  geom_point(size = 2) +
  stat_smooth(col = "orange") +
  theme_cowplot(20) +
  scale_x_continuous(labels = label_number(suffix = "cm")) +
  labs(x = "Species mean size", 
       y = "Likelihood ratio median(ll_N-ll_LN)")

save_plot("output/figures/ll_ratio_plot_mod_13.png",
          ll_ratio_plot,  
          base_height = 8)

xx %>% 
  ggplot(aes(mean_ratio)) +
  geom_vline(xintercept = 1, col = "red")+
  geom_density() +
  labs(x = "LL_NORM/LL_LNORM") 

data_obs_count_allspp %>% 
  filter(species_name %in% head(xx, n = 20)$species_name) %>% 
  ggplot() +
  aes(x = size_class, 
      y = p) +
  geom_point() + 
  geom_line() +
  facet_wrap(~species_name, scales = "free")

data_obs_count_allspp %>% 
  filter(species_name %in% tail(xx, n = 20)$species_name) %>% 
  ggplot() +
  aes(x = size_class, 
      y = p) +
  geom_point() + 
  geom_line() +
  facet_wrap(~species_name, scales = "free")

ll_plots <- 
  par_table3 %>% 
  filter(species_name %in% data_obs_sample$species_name) %>% 
  mutate(dist = case_when(dist == "ll_norm" ~ "Normal", 
                          dist == "ll_lnorm" ~ "Lognormal")) %>% 
  ggplot(aes(x =  dist, 
             y = ll,
             col = dist)) +
  scale_color_manual(values=c("Lognormal" = "red", 
                              "Normal" = "blue"))+
  geom_boxplot() +
  facet_wrap(~species_name, scales = "free") +
  labs(x = "", 
       y = "Loglikelihood") +
  theme(legend.position = "none")

save_plot("output/figures/ll_plots_mod_13.png",
          ll_plots,  
          base_height = 8)


```


