---
title: "What distribution best describes emperical fish species size distributions?"
author: "Freddie Heather, Shane Richards, Asta Audzijonyte"
execute: 
  comment: false
  warning: false
  error: false
  message: false 
  
---

```{r setup, include = FALSE}
# 
# knitr::opts_chunk$set(
#   comment = FALSE, 
#   warning = FALSE, 
#   error   = FALSE, 
#   message = FALSE
# )


if(!dir.exists("output")) dir.create("output")
if(!dir.exists("output/model_fits")) dir.create("output/model_fits")
if(!dir.exists("output/model_plots")) dir.create("output/model_plots")
if(!dir.exists("output/data_figs")) dir.create("output/data_figs")

rerun_models  <- FALSE # will take a while
rerun_figures <- FALSE

overwrite_smallmodels <- TRUE
overwrite_smallplots  <- TRUE
overwrite_largemodels <- FALSE
overwrite_largeplots  <- FALSE


```

# Setup

```{r packages}

library(dplyr)
library(ggplot2)
library(arrow)
library(rstan)
library(tidyr)
library(tidybayes, include.only = c("spread_draws"))
library(cowplot)
library(stringr)
library(rlang)
library(posterior)
library(fitdistrplus, include.only = "fitdist")
library(purrr)


rstan_options(auto_write = TRUE) # avoid recompilation of stan files

```

## Data import

```{r data-import}

data_obs   <- read_parquet("data/data_obs_cleaned.parquet")
data_survs <- read_parquet("data/survey_list_m1_aus.parquet")

rls_bin_breaks <- 
  data_obs %>% 
  pull(size_class) %>% 
  unique() %>% 
  sort()

rls_bin_table <-
  tibble(size_class = c(0, rls_bin_breaks, 500)) %>% 
  mutate(
    size_indx  = 0:(length(size_class)-1),
    size_min = (size_class + lag(size_class))/2,
    size_max = lead(size_min)
  ) %>% 
  filter(size_class %in% c(rls_bin_breaks, 500))

species_list <- data_obs %>% pull(species_name) %>% unique()

species_indx_table <- 
  tibble(
    species_name = species_list, 
    species_indx = 1:length(species_list))

if(!file.exists("data/data_obs_cleaned_sample.parquet")){
  # random 20 species
  set.seed(1)
  random_species <- 
    tibble(
      species_name = sample(unique(data_obs$species_name), 20), 
      species_indx = 1:20)
  
  data_obs %>% 
    filter(species_name %in% random_species$species_name) %>% 
    left_join(random_species, by = join_by(species_name)) %>% 
    write_parquet("data/data_obs_cleaned_sample.parquet")
  
}

data_obs_sample <- read_parquet("data/data_obs_cleaned_sample.parquet")

```

## Data wrangling

```{r data-wrangling}

data_obs_count_allspp <- 
  data_obs %>% 
  count(species_name, size_class) %>% 
  left_join(species_indx_table, by = join_by(species_name)) %>% 
  left_join(rls_bin_table, by = join_by(size_class)) %>% 
  add_count(species_indx, wt = n, name = "totaln_spp") %>% 
  arrange(species_indx, size_indx) %>%
  mutate(p = n/totaln_spp) %>% 
  mutate(row = 1:n()) %>% 
  mutate(min_row = min(row), 
         max_row = max(row),
         .by = species_indx) 

data_obs_count_allspp_byspp <-
  data_obs_count_allspp %>% 
  dplyr::select(species_indx, 
                totaln_spp, 
                min_row, 
                max_row) %>% 
  distinct() %>% 
  arrange(species_indx)


data_obs_count_20spp <- 
  data_obs_sample %>% 
  count(species_name, species_indx, size_class) %>% 
  left_join(rls_bin_table, by = join_by(size_class)) %>% 
  add_count(species_indx, wt = n, name = "totaln_spp") %>% 
  arrange(species_indx, size_indx) %>%
  mutate(p = n/totaln_spp) %>% 
  mutate(row = 1:n()) %>% 
  mutate(min_row = min(row), 
         max_row = max(row),
         .by = species_indx) 

data_obs_count_20spp_byspp <-
  data_obs_count_20spp %>% 
  dplyr::select(species_indx, 
                totaln_spp, 
                min_row, 
                max_row) %>% 
  distinct() %>% 
  arrange(species_indx)


```


## Data simulation

```{r data-simulation}

# set number of simulated species
sim_n_spp <- 20
sim_n_reps <- 1000
set.seed(1)

rls_bin <- function(size) {
  rls_bin_table$size_class[.bincode(size, breaks = c(0, rls_bin_table$size_max))]
}

is_odd <- function(x) ((x/2) %% 1) == 0.5

data_out <- tibble()

for(i in 1:sim_n_spp){
  
  # is odd number?
  if(is_odd(i)) {
    xx <- 
      tibble(num = 1:sim_n_reps) %>% 
      mutate(mean = rlnorm(1, 2.45, 0.78), 
             sd =  0.09687 + mean*0.33557) %>% 
      mutate(size_class_raw = rnorm(n = sim_n_reps, 
                                    mean = mean, 
                                    sd = sd)) %>% 
      mutate(species_indx = i) %>% 
      mutate(species_name = paste0("spp_", species_indx)) %>% 
      filter(size_class_raw > 1.25) %>% 
      mutate(size_class = rls_bin(size_class_raw)) %>% 
      dplyr::select(-num)
  } else {
    xx <- 
      tibble(num = 1:sim_n_reps) %>% 
      mutate(mean = rlnorm(1, 1.5, 0.1), 
             sd =  rlnorm(1, 0.5, 0.1)) %>% 
      mutate(size_class_raw = rlnorm(n = sim_n_reps, 
                                     meanlog = log(mean), 
                                     sdlog = log(sd))) %>% 
      mutate(species_indx = i) %>% 
      mutate(species_name = paste0("spp_", species_indx)) %>% 
      filter(size_class_raw > 1.25) %>% 
      mutate(size_class = rls_bin(size_class_raw)) %>% 
      dplyr::select(-num)
  }
  
  data_out <- bind_rows(data_out, xx)
}

data_sim <- 
  data_out %>% 
  left_join(rls_bin_table %>% dplyr::select(size_class, size_indx),
            by = join_by(size_class)) 

# For binned simulated data
data_sim_count <-
  data_sim %>% 
  count(species_indx, 
        size_class, 
        size_indx) %>% 
  left_join(rls_bin_table, 
            by = join_by(size_class, size_indx)) %>% 
  add_count(species_indx, wt = n, name = "totaln_spp") %>% 
  mutate(p = n/totaln_spp) %>% 
  mutate(row = 1:n()) %>% 
  mutate(min_row = min(row), 
         max_row = max(row),
         .by = species_indx)

data_sim_byspp <-
  data_sim_count %>% 
  dplyr::select(species_indx, 
                totaln_spp, 
                min_row, 
                max_row) %>% 
  distinct()

```

## Data visualisation

### Real data

```{r datavis-realdata}


if(!file.exists("output/data_figs/ssd_obs_20spp.png") | rerun_figures){
  
  p <-
    data_obs_sample %>% 
    count(species_name, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_name, scales = "free") +
    labs(x = "Fish length (cm)",  
         y = "Fish abundance") +
    theme_bw() 
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_obs_20spp.png", 
            base_height = 8)
  
}

if(!file.exists("output/data_figs/ssd_obs_20spp_log.png") | rerun_figures){
  
  p <- 
    data_obs_sample %>% 
    count(species_name, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_name, scales = "free") +
    scale_y_log10() +
    scale_x_log10() +
    labs(x = "Log Fish length (cm)",  
         y = "Log Fish abundance") +
    theme_bw()
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_obs_20spp_log.png", 
            base_height = 8)
  
}

```

### Simulated data

```{r datavis-simulateddata}

if(!file.exists("output/data_figs/ssd_sim_20spp.png") | rerun_figures){
  
  p <-
    data_sim %>% 
    count(species_indx, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_indx, scales = "free") +
    labs(x = "Fish length (cm)",  
         y = "Fish abundance") +
    theme_bw() 
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_sim_20spp.png", 
            base_height = 8)
  
}

if(!file.exists("output/data_figs/ssd_sim_20spp_log.png") | rerun_figures){
  
  p <- 
    data_sim %>% 
    count(species_indx, size_class) %>% 
    ggplot() +
    geom_point(mapping = aes(x = size_class, y = n)) +
    geom_line(mapping = aes(x = size_class, y = n)) +
    facet_wrap( ~ species_indx, scales = "free") +
    scale_y_log10() +
    scale_x_log10() +
    labs(x = "Log Fish length (cm)",  
         y = "Log Fish abundance") +
    theme_bw()
  
  save_plot(plot = p, 
            filename = "output/data_figs/ssd_sim_20spp_log.png", 
            base_height = 8)
  
}


```

# Bayesian modelling

## Outline of models

I want to create the following models:

| Model Name | Stan     | Data | nspp   | Data type | Distribution | Overdispersion? | Bin correction? | par1 (location) | par2 (variance)     |
|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|
| model_01   | model_01 | sim  | 20     | cont      | norm         | No              | No              | per species     | per species         |
| model_02   | model_02 | sim  | 20     | cont      | lnorm        | No              | No              | per species     | per species         |
| model_03   | model_03 | sim  | 20     | bin       | norm         | No              | No              | per species     | per species         |
| model_04   | model_04 | sim  | 20     | bin       | lnorm        | No              | No              | per species     | per species         |
| model_05   | model_03 | real | 20/774 | bin       | norm         | No              | No              | per species     | per species         |
| model_06   | model_04 | real | 20/774 | bin       | lnorm        | No              | No              | per species     | per species         |
| model_07   | model_07 | real | 20/774 | bin       | norm         | No              | No              | per species     | predicted from par1 |
| model_08   | model_08 | real | 20/774 | bin       | lnorm        | No              | No              | per species     | predicted from par1 |
| model_09   |          | real |        | bin       | norm         | No              | Yes             | per species     | per species         |
| model_10   |          | real |        | bin       | lnorm        | No              | Yes             | per species     | per species         |
| model_11   |          | real |        | bin       | norm         | No              | Yes             | per species     | predicted from par1 |
| model_12   |          | real |        | bin       | lnorm        | No              | Yes             | per species     | predicted from par1 |
| model_13   |          | real |        | bin       | norm & lnorm | No              | Yes             | per species     | per species         |
| model_14   |          | real |        | bin       | norm & lnorm | No              | Yes             | per species     | predicted from par1 |


```{r}

mods_summary <-
  tribble(
    ~model_name, ~stan_file, ~data, ~data_type, ~data_source, ~varname, ~n_species, ~distribution, ~bin_correction, ~location_par, ~variance_par,
    "mod_01", "mod_01", "sim", "continuous", "data_sim", "size_class_raw", 20, "norm", "No", "per species", "per species",
    "mod_02", "mod_02",  "sim", "continuous", "data_sim", "size_class_raw", 20, "lnorm", "No", "per species", "per species",
    "mod_03", "mod_03", "sim", "binned",  "data_sim_count", "size_class", 20, "norm", "No", "per species", "per species",
    "mod_04", "mod_04",  "sim", "binned", "data_sim_count", "size_class", 20, "lnorm", "No", "per species", "per species",
    "mod_05", "mod_03", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "No", "per species", "per species",
    "mod_06", "mod_04",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "No", "per species", "per species",
    "mod_05_allspp", "mod_03", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "No", "per species", "per species",
    "mod_06_allspp", "mod_04",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "No", "per species", "per species",
    "mod_07", "mod_07", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "No", "per species", "predicted from par1",
    "mod_08", "mod_08",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "No", "per species", "predicted from par1",
    "mod_07_allspp", "mod_07", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "No", "per species", "predicted from par1",
    "mod_08_allspp", "mod_08",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "No", "per species", "predicted from par1",
    "mod_09", "mod_09", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "Yes", "per species", "per species",
    "mod_10", "mod_10",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "Yes", "per species", "per species",
    "mod_09_allspp", "mod_09", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "Yes", "per species", "per species",
    "mod_10_allspp", "mod_10",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "Yes", "per species", "per species",
    "mod_11", "mod_11", "real", "binned",  "data_obs_count_20spp", "size_class", 20, "norm", "Yes", "per species", "predicted from par1",
    "mod_12", "mod_12",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "lnorm", "Yes", "per species", "predicted from par1",
    "mod_11_allspp", "mod_11", "real", "binned",  "data_obs_count_allspp", "size_class", 774, "norm", "Yes", "per species", "predicted from par1",
    "mod_12_allspp", "mod_12",  "real", "binned", "data_obs_count_allspp", "size_class", 774, "lnorm", "Yes", "per species", "predicted from par1",
    "mod_13", "mod_13",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "norm & lnorm", "Yes", "per species", "per species",
    "mod_14", "mod_14",  "real", "binned", "data_obs_count_20spp", "size_class", 20, "norm & lnorm", "Yes", "per species", "predicted from par1",
  )

```


## Functions

```{r modelling-functions}

# make the stan datalist for models 03 and 04
make_datalist <- function(count_data, spplevel_data){
  list(
    I = nrow(count_data),
    S = max(count_data$species_indx),
    B = max(count_data$size_indx),
    l = rls_bin_table$size_min[1:(max(count_data$size_indx)+1)],
    N_species = spplevel_data$totaln_spp,
    i_min     = spplevel_data$min_row,
    i_max     = spplevel_data$max_row,
    s = count_data$species_indx,
    b = count_data$size_indx,
    n = count_data$n
  )
}

run_stanmod <- function(mod_name, 
                        overwrite = FALSE, 
                        iter = 2000, 
                        warmup = 1500, 
                        chains = 3, 
                        init_r = 2){
  
  mod_fits_filename <- paste0("output/model_fits/", mod_name, ".rds")
  
  if(!file.exists(mod_fits_filename) | overwrite){
    
    stanfile <-
      mods_summary %>% 
      filter(model_name == mod_name)  %>% 
      pull(stan_file) %>% 
      paste0("models/", ., ".stan")
    
    datalist <- eval(parse(text = paste0(mod_name, "_data")))
    
    mod_fit <-
      stan(stanfile,
        data = datalist,
<<<<<<< HEAD
        iter = 2000,
        warmup = 1500,
        chains = 3,
=======
        iter = iter,
        warmup = warmup,
        chains = chains,
>>>>>>> 5e9a92716e0b426b4885ab0938d45e45cd94608a
        refresh = 500,
        init_r = init_r,
        seed = 1,
        cores = chains,
        save_dso = FALSE
      )
    
    saveRDS(mod_fit, mod_fits_filename)
  } else {
    mod_fit <- readRDS(mod_fits_filename)
  }
  return(mod_fit)
}


run_multiple_mods <- function(integer_vector, 
                              all_species = FALSE, 
                              overwrite_model = FALSE, 
                              init_r = 2){
  
  integer_vector %>% 
    str_pad(pad = "0", width = 2) %>% 
    paste0("mod_", .) %>% 
    {if(all_species) paste0(., "_allspp") else .} %>% 
    map(run_stanmod, overwrite = overwrite_model, init_r = init_r)
}


# extract parameters from a stan model in a tidy way
extract_pars <- function(stan_model){

  run_stanmod(stan_model, 
              overwrite = FALSE) %>%
    summarise_draws() %>% 
    mutate(species_indx = str_extract(variable, "(?<=\\[)\\d*(?=\\])") %>% as.numeric()) %>% 
    mutate(parameter = str_remove(variable, "\\[\\d*\\]")) %>% 
    filter(!str_detect(parameter, "ln_")) %>% # transformed from generated quantities
    filter(!str_detect(parameter, "logit_")) %>% # transformed from generated quantities
    filter(parameter != "lp__") %>% 
    dplyr::select(species_indx, 
                  parameter, 
                  median,
                  q5, 
                  q95) %>% 
    drop_na(species_indx) %>% 
    pivot_wider(values_from = median:q95,
                names_from = parameter) %>% 
    pivot_longer(cols = contains(c("median_", "q5_", "q95_")), 
                 names_to = c("quantile", "parameter"),
                 names_pattern = "(.*?)_(.*)") %>% # non-greedy
    pivot_wider(values_from = value, 
                names_from = parameter)
}


plot_mod_fit <- function(mod_name, overwrite = FALSE){
  
  mod_row <- mods_summary %>% filter(model_name == mod_name) 
  
  mod_plots_filename <- paste0("output/model_plots/", mod_name, ".png")
  mod_pars <- extract_pars(mod_name)
  rawdata <- eval(parse(text = mod_row$data_source))
  dist <- mod_row$distribution
  xvar <- mod_row$varname
  data_type <- mod_row$data_type
  all_spp <- str_detect(mod_name, "allspp")
  bin_corr <- str_detect(mod_row$bin_correction, "Yes")
  var_est <- str_detect(mod_row$variance_par, "predicted")
  
  facet_name <- 
    ifelse(
      mod_row$data == "real", 
      "species_name", 
      "species_indx"
    )
  
  subtitle = paste(
    if(all_spp){"774 species, "} else {"20 species, "},
    if(bin_corr){"Corrected for first bin, "} else {"Not corrected for first bin, "},
    if(dist == "norm"){
       if(var_est){"sigma predicted from mu, "} else {"per-species sigma, "}
    } else if(dist == "lnorm") {
        if(var_est){"sdlog predicted from meanlog, "} else {"per-species sdlog, "}
    } else if(dist == "norm & lnorm"){
      if(var_est){"variance pars predicted from location pars, "} else {"per-species variance pars, "}
    },
    if(mod_row$data == "real"){"real data."} else {"simulated data."}
  )
  
  if(!file.exists(mod_plots_filename) | overwrite){
    
    if(data_type == "continuous"){
      mod_plot <- 
        plot_model_continuous(stan_model_pars = mod_pars, 
                              raw_data = rawdata,
                              dist = dist, 
                              xvar = xvar, 
                              facet_var = facet_name, 
                              sub = subtitle)
    }
    
    if(data_type == "binned"){
      mod_plot <- 
        plot_model_binned(stan_model_pars = mod_pars, 
                          raw_data = rawdata,
                          dist = dist, 
                          xvar = xvar, 
                          facet_var = facet_name, 
                          allspp = all_spp, 
                              sub = subtitle)
    }
    
    save_plot(plot = mod_plot, 
              filename = mod_plots_filename, 
              base_height = 8)
  }
  
}


# plot a stan model fit to continuous body size (i.e. simulated data)
plot_model_continuous <- function(stan_model_pars, 
                                  raw_data,  
                                  dist, 
                                  xvar, 
                                  facet_var = "species_indx", 
                                  sub = ""){
  
    
  raw_data %>% 
    full_join(stan_model_pars,
              by = join_by(species_indx),
              multiple = "all")  %>% 
    {if(dist == "norm") mutate(., 
                               fit = dnorm(!!sym(xvar), 
                                           mu, sigma)) else .} %>% 
    {if(dist == "lnorm") mutate(., 
                                fit = dlnorm(!!sym(xvar), 
                                             meanlog, sdlog)) else .} %>%
    dplyr::select(!!sym(facet_var), !!sym(xvar), quantile, fit) %>% 
    pivot_wider(names_from = quantile,
                values_from = fit) %>%
    ggplot() +
    aes(x = !!sym(xvar)) +
    geom_density() +
    geom_line(aes(y = median), 
              col = if(dist == "norm"){"blue"}else{"red"} ,
              alpha = 0.5) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = if(dist == "norm"){"blue"}else{"red"},
                alpha = 0.5) +
    facet_wrap(as.formula(paste("~", facet_var)), scales = "free")  +
    ggtitle(label = sub,
            subtitle = paste0(dist, " (", if(dist == "norm"){"blue"}else{"red"}, ")"))
  
}

# plot a stan model fit to binned body size (e.g. RLS data)
plot_model_binned <- function(stan_model_pars, 
                              raw_data,  
                              dist, 
                              xvar, 
                              facet_var = "species_indx", 
                              allspp, 
                              sub = ""){
  
  if(dist == "norm & lnorm"){
    
    raw_data %>% 
      full_join(stan_model_pars,
                by = join_by(species_indx),
                multiple = "all")  %>% 
      mutate(fit_norm = dnorm(!!sym(xvar), mu, sigma), 
             fit_lnorm = dlnorm(!!sym(xvar), meanlog, sdlog)) %>% 
      dplyr::select(!!sym(facet_var), !!sym(xvar), quantile, p, norm = fit_norm, lnorm = fit_lnorm) %>% 
      pivot_wider(names_from = quantile,
                  values_from = c(norm, lnorm)) %>%
      ggplot() +
      aes(x = !!sym(xvar), 
          y = p) +
      geom_point() +
      geom_line() + 
      geom_point(aes(y = norm_median), 
                 col = "blue",
                 alpha = 0.5) +
      geom_line(aes(y = norm_median), 
                col = "blue",
                alpha = 0.5) +
      geom_ribbon(aes(ymin = norm_q5,
                      ymax = norm_q95),
                  fill = "blue",
                  alpha = 0.5) +
      geom_point(aes(y = lnorm_median), 
                 col = "red",
                 alpha = 0.5) +
      geom_line(aes(y = lnorm_median), 
                col = "red",
                alpha = 0.5) +
      geom_ribbon(aes(ymin = lnorm_q5,
                      ymax = lnorm_q95),
                  fill = "red",
                  alpha = 0.5) +
      facet_wrap(as.formula(paste("~", facet_var)), scales = "free")  +
    ggtitle(label = paste0(dist, " (", if(dist == "norm"){"blue"}else{"red"}, ")"), 
            subtitle = sub)
    
  } else {
    
    raw_data %>% 
      full_join(stan_model_pars,
                by = join_by(species_indx),
                multiple = "all")  %>% 
      {if(allspp) filter(., species_indx %in% 1:20) else .} %>% 
      {if(dist == "norm") mutate(., 
                                 fit = pnorm(size_max, mu,sigma) -  
                                   pnorm(size_min, mu, sigma)) else .} %>% 
      {if(dist == "lnorm") mutate(., 
                                  fit = plnorm(size_max, meanlog, sdlog) -  
                                    plnorm(size_min, meanlog, sdlog)) else .} %>%
      dplyr::select(!!sym(facet_var), !!sym(xvar), quantile, p, fit) %>% 
      pivot_wider(names_from = quantile,
                  values_from = fit) %>%
      ggplot() +
      aes(x = !!sym(xvar), 
          y = p) +
      geom_point() +
      geom_line() + 
      geom_point(aes(y = median), 
                 col = if(dist == "norm"){"blue"}else{"red"},
                 alpha = 0.5) +
      geom_line(aes(y = median), 
                col = if(dist == "norm"){"blue"}else{"red"},
                alpha = 0.5) +
      geom_ribbon(aes(ymin = q5,
                      ymax = q95),
                  fill = if(dist == "norm"){"blue"}else{"red"},
                  alpha = 0.5) +
      facet_wrap(as.formula(paste("~", facet_var)), scales = "free")  +
      ggtitle(paste0(dist, " (", if(dist == "norm"){"blue"}else{"red"}, ")"), 
              subtitle = sub)
  }
  
}

comparison_plot <- function(mod1, mod2, plot_title = ""){
  
  mod_row1 <- mods_summary %>% filter(model_name == mod1) 
  mod_row2 <- mods_summary %>% filter(model_name == mod2) 

  mod_pars1 <- extract_pars(mod1)
  mod_pars2 <- extract_pars(mod2)
  
  rawdata1 <- eval(parse(text = mod_row1$data_source))
  rawdata2 <- eval(parse(text = mod_row2$data_source))
  
  # if(rawdata1 != rawdata2) return("Non-compatable comparison, models must use the same data")
  
  dist1 <- mod_row1$distribution
  dist2 <- mod_row2$distribution
  
  bin_corr1 <- str_detect(mod_row1$bin_correction, "Yes")
  bin_corr2 <- str_detect(mod_row2$bin_correction, "Yes")
  
  get_model_fits <- function(rawdata, mod_pars, dist){
    rawdata %>% 
      arrange(species_indx, size_class) %>% 
      dplyr::select(species_name, species_indx, size_class, size_min, size_max, p) %>% 
      full_join(mod_pars,
                by = join_by(species_indx),
                multiple = "all") %>% 
      {if(dist == "norm") mutate(., fit = pnorm(size_max, mu, sigma) -
                                   pnorm(size_min, mu, sigma)) else .} %>% 
      {if(dist == "lnorm") mutate(.,  fit = plnorm(size_max, meanlog, sdlog) -  
                                    plnorm(size_min, meanlog, sdlog)) else .} %>%
      dplyr::select(species_name, species_indx, size_class, p, quantile, fit) %>% 
      pivot_wider(names_from = quantile,
                  values_from = fit)
  }
  
  mod1_out <- get_model_fits(rawdata1, mod_pars1, dist1)
  mod2_out <- get_model_fits(rawdata2, mod_pars2, dist2)
  
  mod_plot <-
    rawdata1 %>% 
    ggplot() +
    aes(x = size_class, 
        y = p) +
    geom_point() +
    geom_line() + 
    geom_point(aes(y = median), 
               col = if(dist1 == "norm"){"blue"}else{"red"}, 
               alpha = 0.5,
               data = mod1_out) +
    geom_line(aes(y = median), 
              col = if(dist1 == "norm"){"blue"}else{"red"},
              alpha = 0.5,
              lty = if(bin_corr1){1}else{2},
              data = mod1_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = if(dist1 == "norm"){"blue"}else{"red"},
                alpha = 0.5,
                data = mod1_out) +
    geom_point(aes(y = median), 
               col = if(dist2 == "norm"){"blue"}else{"red"}, 
               alpha = 0.5,
               data = mod2_out) +
    geom_line(aes(y = median), 
              col = if(dist2 == "norm"){"blue"}else{"red"}, 
              alpha = 0.5,
              lty = if(bin_corr2){1}else{2},
              data = mod2_out) +
    geom_ribbon(aes(ymin = q5,
                    ymax = q95),
                fill = if(dist2 == "norm"){"blue"}else{"red"}, 
                alpha = 0.5,
                data = mod2_out) +
    facet_wrap(~species_name, scales = "free") +
      ggtitle(label = plot_title, 
            subtitle = "Normal (blue), lognormal (red), bin correction (dotted = no, solid = yes)")
  
  save_plot(plot = mod_plot, 
            filename = paste0("output/model_plots/", mod1, "_vs_", mod2, ".png"), 
            base_height = 8)
}



```


## Models

### Data for models

```{r}

mod_01_data <- 
  mod_02_data <-
  list(
    n = nrow(data_sim),
    n_species = max(data_sim$species_indx),
    species_id = data_sim$species_indx,
    y = data_sim$size_class_raw
    )

mod_03_data <- mod_04_data <- 
  make_datalist(data_sim_count, data_sim_byspp)

mod_05_data <- mod_06_data <- mod_07_data <-
  mod_08_data <- mod_09_data <- mod_10_data <- 
  mod_11_data <- mod_12_data <-
  make_datalist(data_obs_count_20spp, data_obs_count_20spp_byspp)

```

### Running models

```{r}

run_multiple_mods(5, 
                  init_r = 1, 
                  all_species = FALSE,
                  overwrite_model = TRUE)

```

### Plot models

```{r}

5 %>% 
  str_pad(pad = "0", width = 2) %>% 
  paste0("mod_", .) %>% 
  map(plot_mod_fit, 
      overwrite = overwrite_smallplots)

```

<<<<<<< HEAD

## Model 07 (774 species)

**Data:** Real binned data

**Model:** Normal

**Parameters:** Per species mu, sigma predicted from mu


The formula for predicting sigma:

$$
\sigma_k = \beta_0 + \beta_1 \cdot \mu_k
$$

where $k$ is the species id. 

```{r mod07-allspp-modelfit}
if(run_largemodels){
  mod_07_allspp_data <- make_datalist(data_obs_count_allspp, data_obs_count_allspp_byspp)
  
  mod_07_allspp_fit  <- run_stanmod("mod_07_allspp", overwrite = TRUE)
  mod_07_allspp_pars <- extract_pars(mod_07_allspp_fit)
  plot_mod_fit("mod_07_allspp", overwrite = TRUE)
  
}
```

## Model 08 (774 species)

**Data:** Real binned data

**Model:** Lognormal

**Parameters:** Per species meanlog, sdlog predicted from meanlog

The formula for predicting sdlog:

$$
\alpha_k = \beta_0 + \beta_1 \cdot \gamma_k
$$

where $k$ is the species id, and $\alpha$ and $\gamma$ represent meanlog and sdlog. 

```{r mod08-allspp-modelfit}
if(run_largemodels){
  mod_08_allspp_data <- mod_05_allspp_data
  
  mod_08_allspp_fit  <- run_stanmod("mod_08_allspp")
  mod_08_allspp_pars <- extract_pars(mod_08_allspp_fit)
  plot_mod_fit("mod_08_allspp")
  
  traceplot(mod_08_allspp_fit, pars = "mu")
  traceplot(mod_08_allspp_fit, pars = "sigma")
}
```

## Model 07 vs 08

```{r}

mod_06_allspp_pars <- extract_pars(run_stanmod("mod_06_allspp"))
mod_05_allspp_pars <- extract_pars(run_stanmod("mod_05_allspp"))

mod_05_allspp_pars %>% 
  filter(species_indx == 13)

mod_06_allspp_pars %>% 
  filter(species_indx == 13)

data_obs_count_allspp %>% 
  filter(species_indx == 13) %>% 
  ggplot() +
  aes(size_class, p) +
  geom_point() + 
  geom_line()

mod_07_allspp_fit  <- run_stanmod("mod_07_allspp")
mod_07_allspp_pars <- extract_pars(mod_07_allspp_fit)

mod_08_allspp_fit  <- run_stanmod("mod_08_allspp")
mod_08_allspp_pars <- extract_pars(mod_08_allspp_fit)


mod_08_allspp_fit %>% traceplot("meanlog[13]")
mod_08_allspp_fit %>% traceplot("sdlog[13]")

mod_07_allspp_pars %>% 
  filter(quantile == "median") %>% 
  ggplot() +
  aes(x = mu, 
      y = sigma) + 
  geom_point() + 
  stat_smooth()

mod_07_allspp_pars %>% 
  filter(quantile == "median") %>% 
  ggplot() +
  aes(x = mu, 
      y = sigma/mu) + 
  geom_point() + 
  stat_smooth()

mod_08_allspp_pars %>% 
  filter(quantile == "median") %>% 
  ggplot() +
  aes(x = meanlog, 
      y = sdlog) + 
  geom_point() + 
  stat_smooth()

mod_08_allspp_pars
```


## Model 09 (20 species)

**Data:** Real binned data

**Model:** Normal (with bin correction)

**Parameters:** Per species mu, per species sigma

```{r mod09-modelfit}

mod_09_data <- mod_05_data

mod_09_fit  <- run_stanmod("mod_09")
mod_09_pars <- extract_pars(mod_09_fit)
plot_mod_fit("mod_09")

traceplot(mod_09_fit, pars = "mu")
traceplot(mod_09_fit, pars = "sigma")

```
=======
### Comparing models
>>>>>>> 5e9a92716e0b426b4885ab0938d45e45cd94608a

```{r}

comparison_plot("mod_05", "mod_06", "norm vs lnorm, variance per species")
comparison_plot("mod_07", "mod_08", "norm vs lnorm, variance estimated")
comparison_plot("mod_09", "mod_10", "norm vs lnorm, variance per species (with bin correction)")
comparison_plot("mod_11", "mod_12", "norm vs lnorm, variance estimated (with bin correction)")
comparison_plot("mod_05", "mod_09", 
                "norm, correction vs no-correction, variance per species (with bin correction)")
comparison_plot("mod_06", "mod_10", 
                "norm, correction vs no-correction, variance per species (with bin correction)")
comparison_plot("mod_07", 
                "mod_11", "norm, correction vs no-correction, variance estimated (with bin correction)")


comparison_plot("mod_05", "mod_07", "norm, variance per species vs estimated")
comparison_plot("mod_06", "mod_08", "lnorm, variance per species vs estimated")
comparison_plot("mod_09", "mod_11", "norm, variance per species vs estimated (with bin correction)")
comparison_plot("mod_10", "mod_12", "lnorm, variance per species vs estimated (with bin correction)")

```

